{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar33\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\vkr\\\\frontend\\\\src\\\\components\\\\PlayingCards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../styles/PlayingCards.css\";\nimport axios from 'axios';\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst PlayingCards = ({\n  roomCode,\n  card,\n  action,\n  setSelectedCard\n}) => {\n  _s();\n  const player = JSON.parse(localStorage.getItem('player'));\n  const [players, setPlayers] = useState([]);\n  const [isSpecial, setIsSpecial] = useState(false);\n  const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\n  const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\n  const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\n  const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\n  const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\n  const [playerIdToMove, setPlayerIdToMove] = useState();\n  const [monksOptions, setMonksOptions] = useState([]);\n  const [showMonksModal, setShowMonksModal] = useState(false);\n  const [commonerCrusaderCardsOptions, setCommonerCrusaderCardsOptions] = useState([]);\n  const [showCommonerCrusaderCardsModal, setShowCommonerCrusaderCardsModal] = useState(false);\n  const [availableGroups, setAvailableGroups] = useState([]);\n  const [showAvailableGroupsModal, setShowAvailableGroupsModal] = useState(false);\n  const [nextPlayer, setNextPlayer] = useState([]);\n  const [prevPlayer, setPrevPlayer] = useState([]);\n  const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\n  const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\n  const [cardDescription, setCardDescription] = useState();\n  const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\n  const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\n  const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\n  const [cardIdPlay, setCardIdPlay] = useState();\n  const [message, setMessage] = useState('');\n  const [data, setData] = useState([]);\n  const [showModalWithOneChoise, setShowModalWithOneChoise] = useState(false);\n  const [handleName, setHandleName] = useState('');\n  const handleActions = {\n    handleCureEpidemic: id => {\n      handleCureEpidemic(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleStealCrusadePoints: id => {\n      handleStealCrusadePoints(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleChoiseCourtKill: id => {\n      handleChoiseCourtKill(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleResetCard: id => {\n      handleResetCard(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleKillCourt: id => {\n      handleKillCourt(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleDeleteCardAndGetCrusadePoints: id => {\n      handleDeleteCardAndGetCrusadePoints(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleSendCourtCrusaderNeighbor: item => {\n      handleSendCourtCrusaderNeighbor(item.player_id, item.card_id);\n      setShowModalWithOneChoise(false);\n    },\n    handleMoveCard: item => {\n      const playerId = item.other_player_id || item.player_id;\n      const cardId = item.id_card_in_deck || item.card_id;\n      handleMoveCard(playerId, cardId);\n      setShowModalWithOneChoise(false);\n    }\n  };\n  const fetchPlayers = async () => {\n    try {\n      const response_players = await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/players/`);\n      setPlayers(response_players.data);\n    } catch (error) {\n      console.error(\"Ошибка получения пользователей:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchPlayers();\n    setCardDescription(card.card_data.description);\n  }, [roomCode, player.id]);\n  useEffect(() => {\n    if (card.card_group_in_deck === \"universal\") {\n      setIsSpecial(true);\n    }\n  }, [card]);\n  const handleClickItem = async pl => {\n    if (card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id || card.card_data.description !== \"require_discard_to_settle\") {\n      try {\n        const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`, {\n          'player_id': pl.id,\n          'id_card_in_deck': card.id\n        });\n        if (responce.data.epidemics) {\n          setMessage(responce.data.message);\n          setData(responce.data.epidemics);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n        if (responce.data.court_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.court_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdWhereKill(responce.data.player_id_where_kill);\n          return;\n        }\n        if (responce.data.monks) {\n          // setMonksOptions(responce.data.monks);\n          // setShowMonksModal(true);\n          setMessage(responce.data.message);\n          setData(responce.data.monks);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.commoner_crusader_cards) {\n          // setCommonerCrusaderCardsOptions(responce.data.commoner_crusader_cards);\n          // setShowCommonerCrusaderCardsModal(true);\n          setMessage(responce.data.message);\n          setData(responce.data.commoner_crusader_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.available_groups) {\n          setAvailableGroups(responce.data.available_groups);\n          setShowAvailableGroupsModal(true);\n          setNextPlayer(responce.data.neighbors.next_player);\n          setPrevPlayer(responce.data.neighbors.prev_player);\n          return;\n        }\n        if (responce.data.players_with_court) {\n          setMessage(responce.data.message);\n          setData(responce.data.players_with_court);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n        if (responce.data.cards_women_neighbors) {\n          setCardsWomenNeighbors(responce.data.cards_women_neighbors);\n          setShowCardsWomenNeighborsModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.all_played_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.all_played_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdWhereKill(responce.data.player_id);\n          return;\n        }\n        if (responce.data.players_have_crusade_points) {\n          setMessage(responce.data.message);\n          setData(responce.data.players_have_crusade_points);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player);\n          return;\n        }\n        if (responce.data.court_crusader_neighbor) {\n          setMessage(responce.data.message);\n          setData(responce.data.court_crusader_neighbor);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\n      }\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } else if (card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id) {\n      try {\n        const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`, {\n          'player_id': player.id,\n          'card_id': card.id\n        });\n        if (!response.data.can_play) {\n          setmodalAlertIsOpen(true);\n          return;\n        } else if (response.data.can_play && response.data.cards_hand) {\n          setMessage(response.data.message);\n          setData(response.data.cards_hand);\n          setHandleName(response.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при розыгрыше карты в своем городе\", error);\n      }\n    }\n  };\n  const handleCureEpidemic = async epidemicId => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\n        epidemic_id: epidemicId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при лечении эпидемии:\", error);\n    }\n  };\n  const handleKillCourt = async courtCardId => {\n    try {\n      const responce = await axios.post(`\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, {\n        'player_id_where_kill': playerIdWhereKill,\n        'id_card_in_deck': courtCardId,\n        'card_description': cardDescription\n      });\n      if (responce.data.next_player && responce.data.prev_player) {\n        setPeasantCardsOptions([{\n          player_id: responce.data.next_player.id,\n          city_name: responce.data.next_player.city_name,\n          cards: responce.data.next_player.peasant_cards\n        }, {\n          player_id: responce.data.prev_player.id,\n          city_name: responce.data.prev_player.city_name,\n          cards: responce.data.prev_player.peasant_cards\n        }]);\n        setPlayerIdToMovePeasantCards(responce.data.player_id_to_move);\n        setShowPeasantCardsModal(true);\n        return;\n      } else {\n        try {\n          await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n            data: {\n              'player_id': player.id,\n              'id_card_in_deck': card.id\n            }\n          });\n          action();\n          setSelectedCard(null);\n        } catch (error) {\n          console.error(\"Ошибка при удалении карты с руки: \", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты придворного: \", error);\n    }\n  };\n  const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\n    setShowPeasantCardsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\n        'player_id_from_move': fromPlayerId,\n        'player_id_to_move': playerIdToMovePeasantCards,\n        'id_card_in_deck': peasantCardId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перемещении карты простолюдина: \", error);\n    }\n  };\n  const handleMoveCard = async (player_id_from_move, card_id) => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`, {\n        'player_id_from_move': player_id_from_move,\n        'player_id_to_move': playerIdToMove,\n        'card_id': card_id\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перещении карты Монах: \", error);\n    }\n  };\n  const handleChoiseCardToMove = async group => {\n    setShowAvailableGroupsModal(false);\n    const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`, {\n      'next_player_id': nextPlayer.player_id,\n      'prev_player_id': prevPlayer.player_id,\n      'card_group': group\n    });\n    if (response.data.cards_group_neighbors) {\n      setCardsGroupNeighbors(response.data.cards_group_neighbors);\n      setShowCardsGroupNeighborsModal(true);\n    }\n  };\n  const handleSwapCards = async (next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`, {\n      'next_player_id': next_player_id,\n      'next_player_card_id': next_player_card_id,\n      'prev_player_id': prev_player_id,\n      'prev_player_card_id': prev_player_card_id\n    });\n    try {\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты с руки: \", error);\n    }\n  };\n  const handleChoiseCourtKill = async player_id => {\n    const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`, {\n      'player_id': player_id\n    });\n    if (responce.data.court_cards) {\n      setMessage(responce.data.message);\n      setData(responce.data.court_cards);\n      setHandleName(responce.data.handle);\n      setShowModalWithOneChoise(true);\n      setPlayerIdWhereKill(responce.data.player_id_where_kill);\n      return;\n    }\n  };\n  const handleDeleteCardAndGetCrusadePoints = async card_id => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`, {\n        'player_id': playerIdWhereKill,\n        'card_id': card_id\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты и получении ко: \", error);\n    }\n  };\n  const handleStealCrusadePoints = async pl_id => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`, {\n        'player_id_from': pl_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при воровстве ко: \", error);\n    }\n  };\n  const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`, {\n        'player_id_from': player_id_from,\n        'card_id': card_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\n    }\n  };\n  const handleResetCard = async card_id => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`, {\n      'card_id': card_id,\n      'player_id': player.id,\n      'card_id_play': cardIdPlay\n    });\n    action();\n    setSelectedCard(null);\n  };\n  if (isSpecial) {\n    return /*#__PURE__*/_jsxDEV(PlayingSpecialCards, {\n      roomCode: roomCode,\n      card: card,\n      setIsSpecial: setIsSpecial\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalAlertIsOpen,\n      onRequestClose: () => setmodalAlertIsOpen(false),\n      contentLabel: \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0435\",\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041A\\u0430\\u0440\\u0442\\u0443 \\u043D\\u0435\\u043B\\u044C\\u0437\\u044F \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \\u0432 \\u0441\\u0432\\u043E\\u0435\\u043C \\u0433\\u043E\\u0440\\u043E\\u0434\\u0435, \\u0442\\u0430\\u043A \\u043A\\u0430\\u043A \\u043D\\u0435\\u0442 \\u043A\\u0430\\u0440\\u0442 \\u0434\\u043B\\u044F \\u0441\\u0431\\u0440\\u043E\\u0441\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showModalWithOneChoise,\n      onRequestClose: () => setShowModalWithOneChoise(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _handleActions$handle;\n          return (_handleActions$handle = handleActions[handleName]) === null || _handleActions$handle === void 0 ? void 0 : _handleActions$handle.call(handleActions, item);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.card_name || item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this)\n      }, item.card_id || item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showPeasantCardsModal,\n      onRequestClose: () => setShowPeasantCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u043C\\u0443 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u043B\\u044E\\u0434\\u0438\\u043D\\u0443 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 13\n      }, this), peasantCardsOptions.map(source => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", source.city_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 21\n        }, this), source.cards.map(card => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: source.player_id,\n            value: card.id,\n            onChange: () => {\n              setSelectedCardsRadio(prev => ({\n                ...prev,\n                [source.player_id]: card.id\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 29\n          }, this), card.name]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\n            handleMovePeasantCard(card_id, player_id);\n          });\n          setShowPeasantCardsModal(false);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showAvailableGroupsModal,\n      onRequestClose: () => setShowAvailableGroupsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u043E\\u0441\\u043B\\u043E\\u0432\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043E\\u0431\\u043C\\u0435\\u043D\\u0430 \\u0436\\u0438\\u0442\\u0435\\u043B\\u044F\\u043C\\u0438 \\u043C\\u0435\\u0436\\u0434\\u0443 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u043C\\u0438 \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\\u043C\\u0438 \", prevPlayer.player_city_name, \" \\u0438 \", nextPlayer.player_city_name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 13\n      }, this), availableGroups.map((group, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleChoiseCardToMove(group.value),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: group.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsGroupNeighborsModal,\n      onRequestClose: () => setShowCardsGroupNeighborsModal(false),\n      children: cardsGroupNeighbors ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u0439 \\u043A\\u0430\\u0440\\u0442\\u0435 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsGroupNeighbors.next_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 25\n          }, this), cardsGroupNeighbors.next_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsGroupNeighbors.next_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsGroupNeighbors.next_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 33\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsGroupNeighbors.prev_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 25\n          }, this), cardsGroupNeighbors.prev_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsGroupNeighbors.prev_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsGroupNeighbors.prev_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 33\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowCardsGroupNeighborsModal(false);\n            const next_player_id = cardsGroupNeighbors.next_player.player_id;\n            const prev_player_id = cardsGroupNeighbors.prev_player.player_id;\n            const next_player_card_id = selectedCardsRadio[next_player_id];\n            const prev_player_card_id = selectedCardsRadio[prev_player_id];\n            if (next_player_id && prev_player_id && next_player_card_id && prev_player_card_id) {\n              handleSwapCards(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id);\n            } else {\n              alert(`next_player_id= ${next_player_id}, prev_player_id=${prev_player_id}, next_player_card_id=${next_player_card_id}, prev_player_card_id=${prev_player_card_id}`);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u043E\\u043C\\u0435\\u043D\\u044F\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u0430\\u043C\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsWomenNeighborsModal,\n      onRequestClose: () => setShowCardsWomenNeighborsModal(false),\n      children: cardsWomenNeighbors && cardsWomenNeighbors.next_player && cardsWomenNeighbors.prev_player ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u0439 \\u0436\\u0435\\u043D\\u0449\\u0438\\u043D\\u0435 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsWomenNeighbors.next_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 17\n          }, this), cardsWomenNeighbors.next_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsWomenNeighbors.next_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsWomenNeighbors.next_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 21\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsWomenNeighbors.prev_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 17\n          }, this), cardsWomenNeighbors.prev_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsWomenNeighbors.prev_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsWomenNeighbors.prev_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 21\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\n              handleMoveCard(player_id, card_id);\n            });\n            setShowPeasantCardsModal(false);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0432 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u043C \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"accent\",\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 60\n        }, this), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-players\",\n        children: card.card_data.play_only_in_own_city ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(player);\n          },\n          children: player.city_name\n        }, player.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 21\n        }, this) : players.length > 0 ? players.map((value, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(value);\n          },\n          children: value.city_name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PlayingCards, \"kMjjwUsRJkOj6vTLfTLRhXXKFjM=\");\n_c = PlayingCards;\nexport default PlayingCards;\nvar _c;\n$RefreshReg$(_c, \"PlayingCards\");","map":{"version":3,"names":["React","useState","useEffect","axios","PlayingSpecialCards","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","PlayingCards","roomCode","card","action","setSelectedCard","_s","player","JSON","parse","localStorage","getItem","players","setPlayers","isSpecial","setIsSpecial","playerIdWhereKill","setPlayerIdWhereKill","peasantCardsOptions","setPeasantCardsOptions","playerIdToMovePeasantCards","setPlayerIdToMovePeasantCards","showPeasantCardsModal","setShowPeasantCardsModal","selectedCardsRadio","setSelectedCardsRadio","playerIdToMove","setPlayerIdToMove","monksOptions","setMonksOptions","showMonksModal","setShowMonksModal","commonerCrusaderCardsOptions","setCommonerCrusaderCardsOptions","showCommonerCrusaderCardsModal","setShowCommonerCrusaderCardsModal","availableGroups","setAvailableGroups","showAvailableGroupsModal","setShowAvailableGroupsModal","nextPlayer","setNextPlayer","prevPlayer","setPrevPlayer","cardsGroupNeighbors","setCardsGroupNeighbors","showCardsGroupNeighborsModal","setShowCardsGroupNeighborsModal","cardDescription","setCardDescription","cardsWomenNeighbors","setCardsWomenNeighbors","showCardsWomenNeighborsModal","setShowCardsWomenNeighborsModal","modalAlertIsOpen","setmodalAlertIsOpen","cardIdPlay","setCardIdPlay","message","setMessage","data","setData","showModalWithOneChoise","setShowModalWithOneChoise","handleName","setHandleName","handleActions","handleCureEpidemic","id","handleStealCrusadePoints","handleChoiseCourtKill","handleResetCard","handleKillCourt","handleDeleteCardAndGetCrusadePoints","handleSendCourtCrusaderNeighbor","item","player_id","card_id","handleMoveCard","playerId","other_player_id","cardId","id_card_in_deck","fetchPlayers","response_players","get","error","console","card_data","description","card_group_in_deck","handleClickItem","pl","responce","post","epidemics","handle","court_cards","player_id_where_kill","monks","player_id_to_move","commoner_crusader_cards","available_groups","neighbors","next_player","prev_player","players_with_court","cards_women_neighbors","all_played_cards","players_have_crusade_points","court_crusader_neighbor","delete","response","can_play","cards_hand","epidemicId","epidemic_id","courtCardId","city_name","cards","peasant_cards","handleMovePeasantCard","peasantCardId","fromPlayerId","player_id_from_move","handleChoiseCardToMove","group","cards_group_neighbors","handleSwapCards","next_player_id","next_player_card_id","prev_player_id","prev_player_card_id","pl_id","player_id_from","fileName","_jsxFileName","lineNumber","columnNumber","children","isOpen","onRequestClose","contentLabel","className","overlayClassName","map","onClick","_handleActions$handle","call","card_name","name","source","type","value","onChange","prev","Object","entries","forEach","player_city_name","i","label","c","alert","play_only_in_own_city","length","_c","$RefreshReg$"],"sources":["C:/Users/ar33/OneDrive/Документы/vkr/frontend/src/components/PlayingCards.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"../styles/PlayingCards.css\";\r\nimport axios from 'axios';\r\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst PlayingCards = ({roomCode, card, action, setSelectedCard}) => {\r\n    const player = JSON.parse(localStorage.getItem('player'));\r\n\r\n    const [players, setPlayers] = useState([]);\r\n    const [isSpecial, setIsSpecial] = useState(false);\r\n\r\n\r\n    const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\r\n\r\n    const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\r\n    const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\r\n    const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\r\n    const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\r\n\r\n    const [playerIdToMove, setPlayerIdToMove] = useState();\r\n\r\n    const [monksOptions, setMonksOptions] = useState([]);\r\n    const [showMonksModal, setShowMonksModal] = useState(false);\r\n\r\n    const [commonerCrusaderCardsOptions, setCommonerCrusaderCardsOptions] = useState([]);\r\n    const [showCommonerCrusaderCardsModal, setShowCommonerCrusaderCardsModal] = useState(false);\r\n    \r\n    const [availableGroups, setAvailableGroups] = useState([]);\r\n    const [showAvailableGroupsModal, setShowAvailableGroupsModal] = useState(false);\r\n    const [nextPlayer, setNextPlayer] = useState([]);\r\n    const [prevPlayer, setPrevPlayer] = useState([]);\r\n\r\n    const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\r\n    const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\r\n\r\n\r\n    const [cardDescription, setCardDescription] = useState();\r\n\r\n    const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\r\n    const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\r\n\r\n    const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\r\n\r\n    const [cardIdPlay, setCardIdPlay] = useState();\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [showModalWithOneChoise, setShowModalWithOneChoise] = useState(false);\r\n    const [handleName, setHandleName] = useState('');\r\n\r\n    \r\n    const handleActions = {\r\n        handleCureEpidemic: (id) => {\r\n            handleCureEpidemic(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleStealCrusadePoints: (id) => {\r\n            handleStealCrusadePoints(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleChoiseCourtKill: (id) => {\r\n            handleChoiseCourtKill(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleResetCard: (id) => {\r\n            handleResetCard(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleKillCourt: (id) => {\r\n            handleKillCourt(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleDeleteCardAndGetCrusadePoints: (id) => {\r\n            handleDeleteCardAndGetCrusadePoints(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleSendCourtCrusaderNeighbor: (item) => {\r\n            handleSendCourtCrusaderNeighbor(item.player_id, item.card_id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleMoveCard: (item) => {\r\n            const playerId = item.other_player_id || item.player_id;\r\n            const cardId = item.id_card_in_deck || item.card_id;\r\n\r\n            handleMoveCard(playerId, cardId);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n    };\r\n\r\n\r\n    const fetchPlayers = async() => {\r\n        try {\r\n            const response_players = await axios.get(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/players/`\r\n            );\r\n\r\n            setPlayers(response_players.data);\r\n        } catch(error){\r\n            console.error(\"Ошибка получения пользователей:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPlayers();\r\n        setCardDescription(card.card_data.description);\r\n    }, [roomCode, player.id]);\r\n\r\n    useEffect(() => {\r\n        if (card.card_group_in_deck === \"universal\") {\r\n            setIsSpecial(true);\r\n        }\r\n    }, [card]);\r\n\r\n    const handleClickItem = async(pl) => {\r\n        if((card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id) || (card.card_data.description !== \"require_discard_to_settle\")){\r\n            try {\r\n                const responce = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`,{\r\n                        'player_id': pl.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                );\r\n\r\n                if(responce.data.epidemics){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.epidemics);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.court_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.monks){\r\n                    // setMonksOptions(responce.data.monks);\r\n                    // setShowMonksModal(true);\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.monks);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.commoner_crusader_cards){\r\n                    // setCommonerCrusaderCardsOptions(responce.data.commoner_crusader_cards);\r\n                    // setShowCommonerCrusaderCardsModal(true);\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.commoner_crusader_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.available_groups){\r\n                    setAvailableGroups(responce.data.available_groups);\r\n                    setShowAvailableGroupsModal(true);\r\n                    setNextPlayer(responce.data.neighbors.next_player);\r\n                    setPrevPlayer(responce.data.neighbors.prev_player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_with_court){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.players_with_court);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.cards_women_neighbors){\r\n                    setCardsWomenNeighbors(responce.data.cards_women_neighbors);\r\n                    setShowCardsWomenNeighborsModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.all_played_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.all_played_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    setPlayerIdWhereKill(responce.data.player_id);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_have_crusade_points){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.players_have_crusade_points);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    setPlayerIdToMove(responce.data.player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_crusader_neighbor){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.court_crusader_neighbor);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\r\n            }\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            action();\r\n            setSelectedCard(null);\r\n        }\r\n        else if(card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id){\r\n            try{\r\n                const response = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`,\r\n                    {\r\n                        'player_id': player.id,\r\n                        'card_id': card.id\r\n                    }\r\n                );\r\n                if(!response.data.can_play){\r\n                    setmodalAlertIsOpen(true);\r\n                    return;\r\n                }\r\n                else if(response.data.can_play && response.data.cards_hand){\r\n                    setMessage(response.data.message);\r\n                    setData(response.data.cards_hand);\r\n                    setHandleName(response.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при розыгрыше карты в своем городе\",error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCureEpidemic = async (epidemicId) => {\r\n        try {\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\r\n                epidemic_id: epidemicId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            \r\n            action();\r\n            setSelectedCard(null);\r\n        } catch (error) {\r\n            console.error(\"Ошибка при лечении эпидемии:\", error);\r\n        }\r\n    };\r\n\r\n    const handleKillCourt = async (courtCardId) => {\r\n        try{\r\n            const responce = await axios.post(`\r\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, \r\n                {\r\n                    'player_id_where_kill': playerIdWhereKill,\r\n                    'id_card_in_deck': courtCardId,\r\n                    'card_description': cardDescription,\r\n                }\r\n            );\r\n\r\n            if(responce.data.next_player && responce.data.prev_player){\r\n                setPeasantCardsOptions([\r\n                    {\r\n                        player_id: responce.data.next_player.id,\r\n                        city_name: responce.data.next_player.city_name,\r\n                        cards: responce.data.next_player.peasant_cards\r\n                    },\r\n                    {\r\n                        player_id: responce.data.prev_player.id,\r\n                        city_name: responce.data.prev_player.city_name,\r\n                        cards: responce.data.prev_player.peasant_cards\r\n                    }\r\n                ]);\r\n                setPlayerIdToMovePeasantCards(responce.data.player_id_to_move);\r\n                setShowPeasantCardsModal(true);\r\n                return;\r\n            }\r\n            else{\r\n                try {\r\n                    await axios.delete(\r\n                        `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                            data: {\r\n                                'player_id': player.id,\r\n                                'id_card_in_deck': card.id,\r\n                            }\r\n                            \r\n                        }\r\n                    );\r\n\r\n                    action();\r\n                    setSelectedCard(null);\r\n                } catch(error){\r\n                    console.error(\"Ошибка при удалении карты с руки: \", error);\r\n                }\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при удалении карты придворного: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\r\n        setShowPeasantCardsModal(false);\r\n\r\n        try{\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\r\n                'player_id_from_move': fromPlayerId,\r\n                'player_id_to_move': playerIdToMovePeasantCards,\r\n                'id_card_in_deck': peasantCardId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n\r\n        } catch(error){\r\n            console.error(\"Ошибка при перемещении карты простолюдина: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMoveCard = async(player_id_from_move, card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`,\r\n                {\r\n                    'player_id_from_move': player_id_from_move,\r\n                    'player_id_to_move': playerIdToMove,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при перещении карты Монах: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCardToMove = async(group) => {\r\n        setShowAvailableGroupsModal(false);\r\n        \r\n        const response = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`,\r\n            {\r\n                'next_player_id': nextPlayer.player_id,\r\n                'prev_player_id': prevPlayer.player_id,\r\n                'card_group': group\r\n            }\r\n        );\r\n\r\n        if(response.data.cards_group_neighbors){\r\n            setCardsGroupNeighbors(response.data.cards_group_neighbors);\r\n            setShowCardsGroupNeighborsModal(true);\r\n        }\r\n    };\r\n\r\n    const handleSwapCards = async(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`,\r\n            {\r\n                'next_player_id': next_player_id,\r\n                'next_player_card_id': next_player_card_id,\r\n                'prev_player_id': prev_player_id,\r\n                'prev_player_card_id': prev_player_card_id\r\n            }\r\n        );\r\n\r\n        try {\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты с руки: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCourtKill = async(player_id) => {\r\n        const responce = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`,\r\n            {\r\n                'player_id': player_id\r\n            }\r\n        );\r\n\r\n        if(responce.data.court_cards){\r\n            setMessage(responce.data.message);\r\n            setData(responce.data.court_cards);\r\n            setHandleName(responce.data.handle);\r\n            setShowModalWithOneChoise(true);\r\n            setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n            return;\r\n        }\r\n    };\r\n\r\n    const handleDeleteCardAndGetCrusadePoints = async (card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`,\r\n                {\r\n                    'player_id': playerIdWhereKill,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n            \r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты и получении ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleStealCrusadePoints = async (pl_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`,\r\n                {\r\n                    'player_id_from': pl_id,\r\n                    'player_id_to': playerIdToMove,\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при воровстве ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`,\r\n                {\r\n                    'player_id_from': player_id_from,\r\n                    'card_id': card_id,\r\n                    'player_id_to': playerIdToMove\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        }catch(error){\r\n            console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\r\n        }\r\n    };\r\n\r\n    const handleResetCard = async(card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`,\r\n            {\r\n                'card_id': card_id,\r\n                'player_id': player.id,\r\n                'card_id_play': cardIdPlay\r\n            }\r\n        );\r\n        action();\r\n        setSelectedCard(null);\r\n    };\r\n\r\n\r\n    if(isSpecial){\r\n        return (\r\n            <PlayingSpecialCards \r\n                roomCode = {roomCode} \r\n                card = {card} \r\n                setIsSpecial = {setIsSpecial}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Modal\r\n            isOpen={modalAlertIsOpen}\r\n            onRequestClose={() => setmodalAlertIsOpen(false)}\r\n            contentLabel=\"Уведомление\"\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-overlay\"\r\n            >\r\n            <h2>Карту нельзя разыграть в своем городе, так как нет карт для сброса</h2>\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showModalWithOneChoise} \r\n        onRequestClose={() => setShowModalWithOneChoise(false)}\r\n        >\r\n        <h2>{message}</h2>\r\n        {data.map(item => (\r\n            <button key={item.card_id || item.id} onClick={() => handleActions[handleName]?.(item)}>\r\n            <p>{item.card_name || item.name}</p>\r\n            </button>\r\n        ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n            isOpen={showPeasantCardsModal} \r\n            onRequestClose={() => setShowPeasantCardsModal(false)}\r\n        >\r\n            <h2>Выберите по одному простолюдину из соседних городов:</h2>\r\n            {peasantCardsOptions.map((source) => (\r\n                <div>\r\n                    <h3>Город: {source.city_name}</h3>\r\n                    {source.cards.map((card)=>(\r\n                        <label key={card.id}>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={source.player_id} \r\n                                value={card.id}\r\n                                onChange={() => {\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                        ...prev,\r\n                                        [source.player_id]: card.id\r\n                                    }));\r\n                                }}\r\n                            />\r\n                            {card.name}\r\n                        </label>\r\n                    ))}\r\n                        \r\n                </div>\r\n            ))}\r\n            <button \r\n                onClick={() => {\r\n                    Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\r\n                        handleMovePeasantCard(card_id, player_id);\r\n                    });\r\n                    setShowPeasantCardsModal(false);\r\n                }}\r\n            >\r\n                <p>Переместить</p>\r\n            </button>\r\n        </Modal>\r\n\r\n\r\n        <Modal \r\n        isOpen={showAvailableGroupsModal} \r\n        onRequestClose={() => setShowAvailableGroupsModal(false)}\r\n        >\r\n            <h2>Выбери сословие для обмена жителями между соседними городами {prevPlayer.player_city_name} и {nextPlayer.player_city_name}:</h2>\r\n            {availableGroups.map((group, i) => (\r\n                <button key={i} onClick={() => handleChoiseCardToMove(group.value)}>\r\n                <p>{group.label}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n            isOpen={showCardsGroupNeighborsModal} \r\n            onRequestClose={() => setShowCardsGroupNeighborsModal(false)}\r\n        >\r\n            {cardsGroupNeighbors ? (\r\n                <>\r\n                    <h2>Выберите по одной карте из соседних городов:</h2>\r\n                    <div>\r\n                        <h3>Город: {cardsGroupNeighbors.next_player.player_city_name}</h3>\r\n                        {cardsGroupNeighbors.next_player.cards.map(c => (\r\n                            <label key={c.card_id}>\r\n                                <input\r\n                                type=\"radio\"\r\n                                name={cardsGroupNeighbors.next_player.player_id}\r\n                                value={c.card_id}\r\n                                onChange={() =>\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                    ...prev,\r\n                                    [cardsGroupNeighbors.next_player.player_id]: c.card_id\r\n                                    }))\r\n                                }\r\n                                />\r\n                                {c.card_name}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h3>Город: {cardsGroupNeighbors.prev_player.player_city_name}</h3>\r\n                        {cardsGroupNeighbors.prev_player.cards.map(c => (\r\n                            <label key={c.card_id}>\r\n                                <input\r\n                                type=\"radio\"\r\n                                name={cardsGroupNeighbors.prev_player.player_id}\r\n                                value={c.card_id}\r\n                                onChange={() =>\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                    ...prev,\r\n                                    [cardsGroupNeighbors.prev_player.player_id]: c.card_id\r\n                                    }))\r\n                                }\r\n                                />\r\n                                {c.card_name}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                    <button \r\n                        onClick={() => {\r\n                            setShowCardsGroupNeighborsModal(false);\r\n                            const next_player_id = cardsGroupNeighbors.next_player.player_id;\r\n                            const prev_player_id = cardsGroupNeighbors.prev_player.player_id;\r\n\r\n                            const next_player_card_id = selectedCardsRadio[next_player_id];\r\n                            const prev_player_card_id = selectedCardsRadio[prev_player_id];\r\n\r\n                            if (next_player_id && prev_player_id && next_player_card_id && prev_player_card_id) {\r\n                                handleSwapCards(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id);\r\n                            }\r\n                            else{\r\n                                alert(`next_player_id= ${next_player_id}, prev_player_id=${prev_player_id}, next_player_card_id=${next_player_card_id}, prev_player_card_id=${prev_player_card_id}`)\r\n                            }\r\n                        }}\r\n                    >\r\n                        <p>Поменять местами</p>\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <div>Загрузка данных</div>\r\n            )}\r\n            \r\n        </Modal>\r\n\r\n\r\n        <Modal \r\n        isOpen={showCardsWomenNeighborsModal} \r\n        onRequestClose={() => setShowCardsWomenNeighborsModal(false)}\r\n        >\r\n        {cardsWomenNeighbors &&\r\n        cardsWomenNeighbors.next_player &&\r\n        cardsWomenNeighbors.prev_player ? (\r\n            <>\r\n            <h2>Выберите по одной женщине из соседних городов:</h2>\r\n\r\n            <div>\r\n                <h3>Город: {cardsWomenNeighbors.next_player.player_city_name}</h3>\r\n                {cardsWomenNeighbors.next_player.cards.map(c => (\r\n                <label key={c.card_id}>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name={cardsWomenNeighbors.next_player.player_id}\r\n                    value={c.card_id}\r\n                    onChange={() =>\r\n                        setSelectedCardsRadio(prev => ({\r\n                        ...prev,\r\n                        [cardsWomenNeighbors.next_player.player_id]: c.card_id,\r\n                        }))\r\n                    }\r\n                    />\r\n                    {c.card_name}\r\n                </label>\r\n                ))}\r\n            </div>\r\n\r\n            <div>\r\n                <h3>Город: {cardsWomenNeighbors.prev_player.player_city_name}</h3>\r\n                {cardsWomenNeighbors.prev_player.cards.map(c => (\r\n                <label key={c.card_id}>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name={cardsWomenNeighbors.prev_player.player_id}\r\n                    value={c.card_id}\r\n                    onChange={() =>\r\n                        setSelectedCardsRadio(prev => ({\r\n                        ...prev,\r\n                        [cardsWomenNeighbors.prev_player.player_id]: c.card_id,\r\n                        }))\r\n                    }\r\n                    />\r\n                    {c.card_name}\r\n                </label>\r\n                ))}\r\n            </div>\r\n\r\n            <button\r\n                onClick={() => {\r\n                Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\r\n                    handleMoveCard(player_id, card_id);\r\n                });\r\n                setShowPeasantCardsModal(false);\r\n                }}\r\n            >\r\n                <p>Переместить</p>\r\n            </button>\r\n            </>\r\n        ) : (\r\n            <div>Загрузка данных...</div>\r\n        )}\r\n        </Modal>\r\n\r\n          \r\n        <div className='playing-cards'>\r\n            <h2>Выберите город, в котором хотите разыграть <span className='accent'>{card.name}</span>:</h2>\r\n            <div className='list-players'>\r\n                {card.card_data.play_only_in_own_city ? (\r\n                    <div\r\n                    className='item-player'\r\n                    key = {player.id}\r\n                    onClick={() => {handleClickItem(player)}}>\r\n                        {player.city_name}\r\n                    </div>\r\n                ) : (\r\n                    (players.length > 0) ? (\r\n                        players.map((value, i) => (\r\n                            <div \r\n                            className='item-player' \r\n                            key={i}\r\n                            onClick={() => {handleClickItem(value)}}>\r\n                                {value.city_name}\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div>Загрузка данных...</div>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlayingCards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}