{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar33\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\vkr\\\\frontend\\\\src\\\\components\\\\PlayingCards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../styles/PlayingCards.css\";\nimport axios from 'axios';\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst PlayingCards = ({\n  roomCode,\n  card,\n  action,\n  setSelectedCard\n}) => {\n  _s();\n  const player = JSON.parse(localStorage.getItem('player'));\n  const [players, setPlayers] = useState([]);\n  const [isSpecial, setIsSpecial] = useState(false);\n  const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\n  const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\n  const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\n  const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\n  const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\n  const [playerIdToMove, setPlayerIdToMove] = useState();\n  const [monksOptions, setMonksOptions] = useState([]);\n  const [showMonksModal, setShowMonksModal] = useState(false);\n  const [commonerCrusaderCardsOptions, setCommonerCrusaderCardsOptions] = useState([]);\n  const [showCommonerCrusaderCardsModal, setShowCommonerCrusaderCardsModal] = useState(false);\n  const [availableGroups, setAvailableGroups] = useState([]);\n  const [showAvailableGroupsModal, setShowAvailableGroupsModal] = useState(false);\n  const [nextPlayer, setNextPlayer] = useState([]);\n  const [prevPlayer, setPrevPlayer] = useState([]);\n  const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\n  const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\n  const [cardDescription, setCardDescription] = useState();\n  const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\n  const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\n  const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\n  const [cardIdPlay, setCardIdPlay] = useState();\n  const [message, setMessage] = useState('');\n  const [data, setData] = useState([]);\n  const [showModalWithOneChoise, setShowModalWithOneChoise] = useState(false);\n  const [handleName, setHandleName] = useState('');\n  const handleActions = {\n    handleCureEpidemic: id => {\n      handleCureEpidemic(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleStealCrusadePoints: id => {\n      handleStealCrusadePoints(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleChoiseCourtKill: id => {\n      handleChoiseCourtKill(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleResetCard: id => {\n      handleResetCard(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleKillCourt: id => {\n      handleKillCourt(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleDeleteCardAndGetCrusadePoints: id => {\n      handleDeleteCardAndGetCrusadePoints(id);\n      setShowModalWithOneChoise(false);\n    },\n    handleSendCourtCrusaderNeighbor: item => {\n      handleSendCourtCrusaderNeighbor(item.player_id, item.card_id);\n      setShowModalWithOneChoise(false);\n    }\n  };\n  const fetchPlayers = async () => {\n    try {\n      const response_players = await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/players/`);\n      setPlayers(response_players.data);\n    } catch (error) {\n      console.error(\"Ошибка получения пользователей:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchPlayers();\n    setCardDescription(card.card_data.description);\n  }, [roomCode, player.id]);\n  useEffect(() => {\n    if (card.card_group_in_deck === \"universal\") {\n      setIsSpecial(true);\n    }\n  }, [card]);\n  const handleClickItem = async pl => {\n    if (card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id || card.card_data.description !== \"require_discard_to_settle\") {\n      try {\n        const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`, {\n          'player_id': pl.id,\n          'id_card_in_deck': card.id\n        });\n        if (responce.data.epidemics) {\n          setMessage(responce.data.message);\n          setData(responce.data.epidemics);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n        if (responce.data.court_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.court_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdWhereKill(responce.data.player_id_where_kill);\n          return;\n        }\n        if (responce.data.monks) {\n          setMonksOptions(responce.data.monks);\n          setShowMonksModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.commoner_crusader_cards) {\n          setCommonerCrusaderCardsOptions(responce.data.commoner_crusader_cards);\n          setShowCommonerCrusaderCardsModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.available_groups) {\n          setAvailableGroups(responce.data.available_groups);\n          setShowAvailableGroupsModal(true);\n          setNextPlayer(responce.data.neighbors.next_player);\n          setPrevPlayer(responce.data.neighbors.prev_player);\n          return;\n        }\n        if (responce.data.players_with_court) {\n          setMessage(responce.data.message);\n          setData(responce.data.players_with_court);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n        if (responce.data.cards_women_neighbors) {\n          setCardsWomenNeighbors(responce.data.cards_women_neighbors);\n          setShowCardsWomenNeighborsModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.all_played_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.all_played_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdWhereKill(responce.data.player_id);\n          return;\n        }\n        if (responce.data.players_have_crusade_points) {\n          setMessage(responce.data.message);\n          setData(responce.data.players_have_crusade_points);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player);\n          return;\n        }\n        if (responce.data.court_crusader_neighbor) {\n          // setCourtCrusaderNeighbor(responce.data.court_crusader_neighbor);\n          // setShowCourtCrusaderNeighborModal(true);\n          setMessage(responce.data.message);\n          setData(responce.data.court_crusader_neighbor);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\n      }\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } else if (card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id) {\n      try {\n        const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`, {\n          'player_id': player.id,\n          'card_id': card.id\n        });\n        if (!response.data.can_play) {\n          setmodalAlertIsOpen(true);\n          return;\n        } else if (response.data.can_play && response.data.cards_hand) {\n          setMessage(response.data.message);\n          setData(response.data.cards_hand);\n          setHandleName(response.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при розыгрыше карты в своем городе\", error);\n      }\n    }\n  };\n  const handleCureEpidemic = async epidemicId => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\n        epidemic_id: epidemicId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при лечении эпидемии:\", error);\n    }\n  };\n  const handleKillCourt = async courtCardId => {\n    try {\n      const responce = await axios.post(`\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, {\n        'player_id_where_kill': playerIdWhereKill,\n        'id_card_in_deck': courtCardId,\n        'card_description': cardDescription\n      });\n      if (responce.data.next_player && responce.data.prev_player) {\n        setPeasantCardsOptions([{\n          player_id: responce.data.next_player.id,\n          city_name: responce.data.next_player.city_name,\n          cards: responce.data.next_player.peasant_cards\n        }, {\n          player_id: responce.data.prev_player.id,\n          city_name: responce.data.prev_player.city_name,\n          cards: responce.data.prev_player.peasant_cards\n        }]);\n        setPlayerIdToMovePeasantCards(responce.data.player_id_to_move);\n        setShowPeasantCardsModal(true);\n        return;\n      } else {\n        try {\n          await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n            data: {\n              'player_id': player.id,\n              'id_card_in_deck': card.id\n            }\n          });\n          action();\n          setSelectedCard(null);\n        } catch (error) {\n          console.error(\"Ошибка при удалении карты с руки: \", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты придворного: \", error);\n    }\n  };\n  const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\n    setShowPeasantCardsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\n        'player_id_from_move': fromPlayerId,\n        'player_id_to_move': playerIdToMovePeasantCards,\n        'id_card_in_deck': peasantCardId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перемещении карты простолюдина: \", error);\n    }\n  };\n  const handleMoveCard = async (player_id_from_move, card_id) => {\n    setShowMonksModal(false);\n    setShowCommonerCrusaderCardsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`, {\n        'player_id_from_move': player_id_from_move,\n        'player_id_to_move': playerIdToMove,\n        'card_id': card_id\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перещении карты Монах: \", error);\n    }\n  };\n  const handleChoiseCardToMove = async group => {\n    setShowAvailableGroupsModal(false);\n    const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`, {\n      'next_player_id': nextPlayer.player_id,\n      'prev_player_id': prevPlayer.player_id,\n      'card_group': group\n    });\n    if (response.data.cards_group_neighbors) {\n      setCardsGroupNeighbors(response.data.cards_group_neighbors);\n      setShowCardsGroupNeighborsModal(true);\n    }\n  };\n  const handleSwapCards = async (next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`, {\n      'next_player_id': next_player_id,\n      'next_player_card_id': next_player_card_id,\n      'prev_player_id': prev_player_id,\n      'prev_player_card_id': prev_player_card_id\n    });\n    try {\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты с руки: \", error);\n    }\n  };\n  const handleChoiseCourtKill = async player_id => {\n    const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`, {\n      'player_id': player_id\n    });\n    if (responce.data.court_cards) {\n      setMessage(responce.data.message);\n      setData(responce.data.court_cards);\n      setHandleName(responce.data.handle);\n      setShowModalWithOneChoise(true);\n      setPlayerIdWhereKill(responce.data.player_id_where_kill);\n      return;\n    }\n  };\n  const handleDeleteCardAndGetCrusadePoints = async card_id => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`, {\n        'player_id': playerIdWhereKill,\n        'card_id': card_id\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты и получении ко: \", error);\n    }\n  };\n  const handleStealCrusadePoints = async pl_id => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`, {\n        'player_id_from': pl_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при воровстве ко: \", error);\n    }\n  };\n  const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`, {\n        'player_id_from': player_id_from,\n        'card_id': card_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\n    }\n  };\n  const handleResetCard = async card_id => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`, {\n      'card_id': card_id,\n      'player_id': player.id,\n      'card_id_play': cardIdPlay\n    });\n    action();\n    setSelectedCard(null);\n  };\n  if (isSpecial) {\n    return /*#__PURE__*/_jsxDEV(PlayingSpecialCards, {\n      roomCode: roomCode,\n      card: card,\n      setIsSpecial: setIsSpecial\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalAlertIsOpen,\n      onRequestClose: () => setmodalAlertIsOpen(false),\n      contentLabel: \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0435\",\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041A\\u0430\\u0440\\u0442\\u0443 \\u043D\\u0435\\u043B\\u044C\\u0437\\u044F \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \\u0432 \\u0441\\u0432\\u043E\\u0435\\u043C \\u0433\\u043E\\u0440\\u043E\\u0434\\u0435, \\u0442\\u0430\\u043A \\u043A\\u0430\\u043A \\u043D\\u0435\\u0442 \\u043A\\u0430\\u0440\\u0442 \\u0434\\u043B\\u044F \\u0441\\u0431\\u0440\\u043E\\u0441\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showModalWithOneChoise,\n      onRequestClose: () => setShowModalWithOneChoise(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _handleActions$handle;\n          return (_handleActions$handle = handleActions[handleName]) === null || _handleActions$handle === void 0 ? void 0 : _handleActions$handle.call(handleActions, item);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.card_name || item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this)\n      }, item.card_id || item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showPeasantCardsModal,\n      onRequestClose: () => setShowPeasantCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u043C\\u0443 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u043B\\u044E\\u0434\\u0438\\u043D\\u0443 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 13\n      }, this), peasantCardsOptions.map(source => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", source.city_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 21\n        }, this), source.cards.map(card => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: source.player_id,\n            value: card.id,\n            onChange: () => {\n              setSelectedCardsRadio(prev => ({\n                ...prev,\n                [source.player_id]: card.id\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 29\n          }, this), card.name]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\n            handleMovePeasantCard(card_id, player_id);\n          });\n          setShowPeasantCardsModal(false);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showMonksModal,\n      onRequestClose: () => setShowMonksModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0438\\u0437 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u0433\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0430\\u043D\\u0438\\u0442\\u044C \\u041C\\u043E\\u043D\\u0430\\u0445\\u0430:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 13\n      }, this), monksOptions.map(monk => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoveCard(monk.other_player_id, monk.id_card_in_deck),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: monk.other_player_city_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 17\n        }, this)\n      }, monk.other_player_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCommonerCrusaderCardsModal,\n      onRequestClose: () => setShowCommonerCrusaderCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043A\\u0430\\u0440\\u0442\\u0443 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u043B\\u044E\\u0434\\u0438\\u043D\\u0430 \\u043A\\u0440\\u0435\\u0441\\u0442\\u043E\\u043D\\u043E\\u0441\\u0446\\u0430, \\u043A\\u043E\\u0442\\u043E\\u0440\\u0443\\u044E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 13\n      }, this), commonerCrusaderCardsOptions.map(card => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoveCard(card.player_id, card.card_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.card_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 17\n        }, this)\n      }, card.card_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showAvailableGroupsModal,\n      onRequestClose: () => setShowAvailableGroupsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u043E\\u0441\\u043B\\u043E\\u0432\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043E\\u0431\\u043C\\u0435\\u043D\\u0430 \\u0436\\u0438\\u0442\\u0435\\u043B\\u044F\\u043C\\u0438 \\u043C\\u0435\\u0436\\u0434\\u0443 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u043C\\u0438 \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\\u043C\\u0438 \", prevPlayer.player_city_name, \" \\u0438 \", nextPlayer.player_city_name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 13\n      }, this), availableGroups.map((group, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleChoiseCardToMove(group.value),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: group.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsGroupNeighborsModal,\n      onRequestClose: () => setShowCardsGroupNeighborsModal(false),\n      children: cardsGroupNeighbors ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u0439 \\u043A\\u0430\\u0440\\u0442\\u0435 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsGroupNeighbors.next_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 25\n          }, this), cardsGroupNeighbors.next_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsGroupNeighbors.next_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsGroupNeighbors.next_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 33\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsGroupNeighbors.prev_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 25\n          }, this), cardsGroupNeighbors.prev_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsGroupNeighbors.prev_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsGroupNeighbors.prev_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 33\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowCardsGroupNeighborsModal(false);\n            const next_player_id = cardsGroupNeighbors.next_player.player_id;\n            const prev_player_id = cardsGroupNeighbors.prev_player.player_id;\n            const next_player_card_id = selectedCardsRadio[next_player_id];\n            const prev_player_card_id = selectedCardsRadio[prev_player_id];\n            if (next_player_id && prev_player_id && next_player_card_id && prev_player_card_id) {\n              handleSwapCards(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id);\n            } else {\n              alert(`next_player_id= ${next_player_id}, prev_player_id=${prev_player_id}, next_player_card_id=${next_player_card_id}, prev_player_card_id=${prev_player_card_id}`);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u043E\\u043C\\u0435\\u043D\\u044F\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u0430\\u043C\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsWomenNeighborsModal,\n      onRequestClose: () => setShowCardsWomenNeighborsModal(false),\n      children: cardsWomenNeighbors && cardsWomenNeighbors.next_player && cardsWomenNeighbors.prev_player ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u0439 \\u0436\\u0435\\u043D\\u0449\\u0438\\u043D\\u0435 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsWomenNeighbors.next_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 17\n          }, this), cardsWomenNeighbors.next_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsWomenNeighbors.next_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsWomenNeighbors.next_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 21\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsWomenNeighbors.prev_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 17\n          }, this), cardsWomenNeighbors.prev_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsWomenNeighbors.prev_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsWomenNeighbors.prev_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 21\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\n              handleMoveCard(player_id, card_id);\n            });\n            setShowPeasantCardsModal(false);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0432 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u043C \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"accent\",\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 60\n        }, this), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-players\",\n        children: card.card_data.play_only_in_own_city ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(player);\n          },\n          children: player.city_name\n        }, player.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 21\n        }, this) : players.length > 0 ? players.map((value, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(value);\n          },\n          children: value.city_name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PlayingCards, \"kMjjwUsRJkOj6vTLfTLRhXXKFjM=\");\n_c = PlayingCards;\nexport default PlayingCards;\nvar _c;\n$RefreshReg$(_c, \"PlayingCards\");","map":{"version":3,"names":["React","useState","useEffect","axios","PlayingSpecialCards","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","PlayingCards","roomCode","card","action","setSelectedCard","_s","player","JSON","parse","localStorage","getItem","players","setPlayers","isSpecial","setIsSpecial","playerIdWhereKill","setPlayerIdWhereKill","peasantCardsOptions","setPeasantCardsOptions","playerIdToMovePeasantCards","setPlayerIdToMovePeasantCards","showPeasantCardsModal","setShowPeasantCardsModal","selectedCardsRadio","setSelectedCardsRadio","playerIdToMove","setPlayerIdToMove","monksOptions","setMonksOptions","showMonksModal","setShowMonksModal","commonerCrusaderCardsOptions","setCommonerCrusaderCardsOptions","showCommonerCrusaderCardsModal","setShowCommonerCrusaderCardsModal","availableGroups","setAvailableGroups","showAvailableGroupsModal","setShowAvailableGroupsModal","nextPlayer","setNextPlayer","prevPlayer","setPrevPlayer","cardsGroupNeighbors","setCardsGroupNeighbors","showCardsGroupNeighborsModal","setShowCardsGroupNeighborsModal","cardDescription","setCardDescription","cardsWomenNeighbors","setCardsWomenNeighbors","showCardsWomenNeighborsModal","setShowCardsWomenNeighborsModal","modalAlertIsOpen","setmodalAlertIsOpen","cardIdPlay","setCardIdPlay","message","setMessage","data","setData","showModalWithOneChoise","setShowModalWithOneChoise","handleName","setHandleName","handleActions","handleCureEpidemic","id","handleStealCrusadePoints","handleChoiseCourtKill","handleResetCard","handleKillCourt","handleDeleteCardAndGetCrusadePoints","handleSendCourtCrusaderNeighbor","item","player_id","card_id","fetchPlayers","response_players","get","error","console","card_data","description","card_group_in_deck","handleClickItem","pl","responce","post","epidemics","handle","court_cards","player_id_where_kill","monks","player_id_to_move","commoner_crusader_cards","available_groups","neighbors","next_player","prev_player","players_with_court","cards_women_neighbors","all_played_cards","players_have_crusade_points","court_crusader_neighbor","delete","response","can_play","cards_hand","epidemicId","epidemic_id","courtCardId","city_name","cards","peasant_cards","handleMovePeasantCard","peasantCardId","fromPlayerId","handleMoveCard","player_id_from_move","handleChoiseCardToMove","group","cards_group_neighbors","handleSwapCards","next_player_id","next_player_card_id","prev_player_id","prev_player_card_id","pl_id","player_id_from","fileName","_jsxFileName","lineNumber","columnNumber","children","isOpen","onRequestClose","contentLabel","className","overlayClassName","map","onClick","_handleActions$handle","call","card_name","name","source","type","value","onChange","prev","Object","entries","forEach","monk","other_player_id","id_card_in_deck","other_player_city_name","player_city_name","i","label","c","alert","play_only_in_own_city","length","_c","$RefreshReg$"],"sources":["C:/Users/ar33/OneDrive/Документы/vkr/frontend/src/components/PlayingCards.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"../styles/PlayingCards.css\";\r\nimport axios from 'axios';\r\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst PlayingCards = ({roomCode, card, action, setSelectedCard}) => {\r\n    const player = JSON.parse(localStorage.getItem('player'));\r\n\r\n    const [players, setPlayers] = useState([]);\r\n    const [isSpecial, setIsSpecial] = useState(false);\r\n\r\n\r\n    const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\r\n\r\n    const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\r\n    const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\r\n    const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\r\n    const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\r\n\r\n    const [playerIdToMove, setPlayerIdToMove] = useState();\r\n\r\n    const [monksOptions, setMonksOptions] = useState([]);\r\n    const [showMonksModal, setShowMonksModal] = useState(false);\r\n\r\n    const [commonerCrusaderCardsOptions, setCommonerCrusaderCardsOptions] = useState([]);\r\n    const [showCommonerCrusaderCardsModal, setShowCommonerCrusaderCardsModal] = useState(false);\r\n    \r\n    const [availableGroups, setAvailableGroups] = useState([]);\r\n    const [showAvailableGroupsModal, setShowAvailableGroupsModal] = useState(false);\r\n    const [nextPlayer, setNextPlayer] = useState([]);\r\n    const [prevPlayer, setPrevPlayer] = useState([]);\r\n\r\n    const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\r\n    const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\r\n\r\n\r\n    const [cardDescription, setCardDescription] = useState();\r\n\r\n    const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\r\n    const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\r\n\r\n    const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\r\n\r\n    const [cardIdPlay, setCardIdPlay] = useState();\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [showModalWithOneChoise, setShowModalWithOneChoise] = useState(false);\r\n    const [handleName, setHandleName] = useState('');\r\n\r\n    \r\n    const handleActions = {\r\n        handleCureEpidemic: (id) => {\r\n            handleCureEpidemic(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleStealCrusadePoints: (id) => {\r\n            handleStealCrusadePoints(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleChoiseCourtKill: (id) => {\r\n            handleChoiseCourtKill(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleResetCard: (id) => {\r\n            handleResetCard(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleKillCourt: (id) => {\r\n            handleKillCourt(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleDeleteCardAndGetCrusadePoints: (id) => {\r\n            handleDeleteCardAndGetCrusadePoints(id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleSendCourtCrusaderNeighbor: (item) => {\r\n            handleSendCourtCrusaderNeighbor(item.player_id, item.card_id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n    };\r\n\r\n\r\n    const fetchPlayers = async() => {\r\n        try {\r\n            const response_players = await axios.get(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/players/`\r\n            );\r\n\r\n            setPlayers(response_players.data);\r\n        } catch(error){\r\n            console.error(\"Ошибка получения пользователей:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPlayers();\r\n        setCardDescription(card.card_data.description);\r\n    }, [roomCode, player.id]);\r\n\r\n    useEffect(() => {\r\n        if (card.card_group_in_deck === \"universal\") {\r\n            setIsSpecial(true);\r\n        }\r\n    }, [card]);\r\n\r\n    const handleClickItem = async(pl) => {\r\n        if((card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id) || (card.card_data.description !== \"require_discard_to_settle\")){\r\n            try {\r\n                const responce = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`,{\r\n                        'player_id': pl.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                );\r\n\r\n                if(responce.data.epidemics){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.epidemics);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.court_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.monks){\r\n                    setMonksOptions(responce.data.monks);\r\n                    setShowMonksModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.commoner_crusader_cards){\r\n                    setCommonerCrusaderCardsOptions(responce.data.commoner_crusader_cards);\r\n                    setShowCommonerCrusaderCardsModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.available_groups){\r\n                    setAvailableGroups(responce.data.available_groups);\r\n                    setShowAvailableGroupsModal(true);\r\n                    setNextPlayer(responce.data.neighbors.next_player);\r\n                    setPrevPlayer(responce.data.neighbors.prev_player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_with_court){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.players_with_court);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.cards_women_neighbors){\r\n                    setCardsWomenNeighbors(responce.data.cards_women_neighbors);\r\n                    setShowCardsWomenNeighborsModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.all_played_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.all_played_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    setPlayerIdWhereKill(responce.data.player_id);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_have_crusade_points){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.players_have_crusade_points);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    setPlayerIdToMove(responce.data.player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_crusader_neighbor){\r\n                    // setCourtCrusaderNeighbor(responce.data.court_crusader_neighbor);\r\n                    // setShowCourtCrusaderNeighborModal(true);\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.court_crusader_neighbor);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\r\n            }\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            action();\r\n            setSelectedCard(null);\r\n        }\r\n        else if(card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id){\r\n            try{\r\n                const response = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`,\r\n                    {\r\n                        'player_id': player.id,\r\n                        'card_id': card.id\r\n                    }\r\n                );\r\n                if(!response.data.can_play){\r\n                    setmodalAlertIsOpen(true);\r\n                    return;\r\n                }\r\n                else if(response.data.can_play && response.data.cards_hand){\r\n                    setMessage(response.data.message);\r\n                    setData(response.data.cards_hand);\r\n                    setHandleName(response.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при розыгрыше карты в своем городе\",error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCureEpidemic = async (epidemicId) => {\r\n        try {\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\r\n                epidemic_id: epidemicId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            \r\n            action();\r\n            setSelectedCard(null);\r\n        } catch (error) {\r\n            console.error(\"Ошибка при лечении эпидемии:\", error);\r\n        }\r\n    };\r\n\r\n    const handleKillCourt = async (courtCardId) => {\r\n        try{\r\n            const responce = await axios.post(`\r\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, \r\n                {\r\n                    'player_id_where_kill': playerIdWhereKill,\r\n                    'id_card_in_deck': courtCardId,\r\n                    'card_description': cardDescription,\r\n                }\r\n            );\r\n\r\n            if(responce.data.next_player && responce.data.prev_player){\r\n                setPeasantCardsOptions([\r\n                    {\r\n                        player_id: responce.data.next_player.id,\r\n                        city_name: responce.data.next_player.city_name,\r\n                        cards: responce.data.next_player.peasant_cards\r\n                    },\r\n                    {\r\n                        player_id: responce.data.prev_player.id,\r\n                        city_name: responce.data.prev_player.city_name,\r\n                        cards: responce.data.prev_player.peasant_cards\r\n                    }\r\n                ]);\r\n                setPlayerIdToMovePeasantCards(responce.data.player_id_to_move);\r\n                setShowPeasantCardsModal(true);\r\n                return;\r\n            }\r\n            else{\r\n                try {\r\n                    await axios.delete(\r\n                        `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                            data: {\r\n                                'player_id': player.id,\r\n                                'id_card_in_deck': card.id,\r\n                            }\r\n                            \r\n                        }\r\n                    );\r\n\r\n                    action();\r\n                    setSelectedCard(null);\r\n                } catch(error){\r\n                    console.error(\"Ошибка при удалении карты с руки: \", error);\r\n                }\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при удалении карты придворного: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\r\n        setShowPeasantCardsModal(false);\r\n\r\n        try{\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\r\n                'player_id_from_move': fromPlayerId,\r\n                'player_id_to_move': playerIdToMovePeasantCards,\r\n                'id_card_in_deck': peasantCardId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n\r\n        } catch(error){\r\n            console.error(\"Ошибка при перемещении карты простолюдина: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMoveCard = async(player_id_from_move, card_id) => {\r\n        setShowMonksModal(false);\r\n        setShowCommonerCrusaderCardsModal(false);\r\n\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`,\r\n                {\r\n                    'player_id_from_move': player_id_from_move,\r\n                    'player_id_to_move': playerIdToMove,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при перещении карты Монах: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCardToMove = async(group) => {\r\n        setShowAvailableGroupsModal(false);\r\n        \r\n        const response = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`,\r\n            {\r\n                'next_player_id': nextPlayer.player_id,\r\n                'prev_player_id': prevPlayer.player_id,\r\n                'card_group': group\r\n            }\r\n        );\r\n\r\n        if(response.data.cards_group_neighbors){\r\n            setCardsGroupNeighbors(response.data.cards_group_neighbors);\r\n            setShowCardsGroupNeighborsModal(true);\r\n        }\r\n    };\r\n\r\n    const handleSwapCards = async(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`,\r\n            {\r\n                'next_player_id': next_player_id,\r\n                'next_player_card_id': next_player_card_id,\r\n                'prev_player_id': prev_player_id,\r\n                'prev_player_card_id': prev_player_card_id\r\n            }\r\n        );\r\n\r\n        try {\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты с руки: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCourtKill = async(player_id) => {\r\n        const responce = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`,\r\n            {\r\n                'player_id': player_id\r\n            }\r\n        );\r\n\r\n        if(responce.data.court_cards){\r\n            setMessage(responce.data.message);\r\n            setData(responce.data.court_cards);\r\n            setHandleName(responce.data.handle);\r\n            setShowModalWithOneChoise(true);\r\n            setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n            return;\r\n        }\r\n    };\r\n\r\n    const handleDeleteCardAndGetCrusadePoints = async (card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`,\r\n                {\r\n                    'player_id': playerIdWhereKill,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n            \r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты и получении ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleStealCrusadePoints = async (pl_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`,\r\n                {\r\n                    'player_id_from': pl_id,\r\n                    'player_id_to': playerIdToMove,\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при воровстве ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`,\r\n                {\r\n                    'player_id_from': player_id_from,\r\n                    'card_id': card_id,\r\n                    'player_id_to': playerIdToMove\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        }catch(error){\r\n            console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\r\n        }\r\n    };\r\n\r\n    const handleResetCard = async(card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`,\r\n            {\r\n                'card_id': card_id,\r\n                'player_id': player.id,\r\n                'card_id_play': cardIdPlay\r\n            }\r\n        );\r\n        action();\r\n        setSelectedCard(null);\r\n    };\r\n\r\n\r\n    if(isSpecial){\r\n        return (\r\n            <PlayingSpecialCards \r\n                roomCode = {roomCode} \r\n                card = {card} \r\n                setIsSpecial = {setIsSpecial}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Modal\r\n            isOpen={modalAlertIsOpen}\r\n            onRequestClose={() => setmodalAlertIsOpen(false)}\r\n            contentLabel=\"Уведомление\"\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-overlay\"\r\n            >\r\n            <h2>Карту нельзя разыграть в своем городе, так как нет карт для сброса</h2>\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showModalWithOneChoise} \r\n        onRequestClose={() => setShowModalWithOneChoise(false)}\r\n        >\r\n        <h2>{message}</h2>\r\n        {data.map(item => (\r\n            <button key={item.card_id || item.id} onClick={() => handleActions[handleName]?.(item)}>\r\n            <p>{item.card_name || item.name}</p>\r\n            </button>\r\n        ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n            isOpen={showPeasantCardsModal} \r\n            onRequestClose={() => setShowPeasantCardsModal(false)}\r\n        >\r\n            <h2>Выберите по одному простолюдину из соседних городов:</h2>\r\n            {peasantCardsOptions.map((source) => (\r\n                <div>\r\n                    <h3>Город: {source.city_name}</h3>\r\n                    {source.cards.map((card)=>(\r\n                        <label key={card.id}>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={source.player_id} \r\n                                value={card.id}\r\n                                onChange={() => {\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                        ...prev,\r\n                                        [source.player_id]: card.id\r\n                                    }));\r\n                                }}\r\n                            />\r\n                            {card.name}\r\n                        </label>\r\n                    ))}\r\n                        \r\n                </div>\r\n            ))}\r\n            <button \r\n                onClick={() => {\r\n                    Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\r\n                        handleMovePeasantCard(card_id, player_id);\r\n                    });\r\n                    setShowPeasantCardsModal(false);\r\n                }}\r\n            >\r\n                <p>Переместить</p>\r\n            </button>\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showMonksModal} \r\n        onRequestClose={() => setShowMonksModal(false)}\r\n        >\r\n            <h2>Выберите город, из которого хотите переманить Монаха:</h2>\r\n            {monksOptions.map(monk => (\r\n                <button key={monk.other_player_id} onClick={() => handleMoveCard(monk.other_player_id, monk.id_card_in_deck)}>\r\n                <p>{monk.other_player_city_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showCommonerCrusaderCardsModal} \r\n        onRequestClose={() => setShowCommonerCrusaderCardsModal(false)}\r\n        >\r\n            <h2>Выберите карту простолюдина крестоносца, которую хотите переместить:</h2>\r\n            {commonerCrusaderCardsOptions.map(card => (\r\n                <button key={card.card_id} onClick={() => handleMoveCard(card.player_id, card.card_id)}>\r\n                <p>{card.card_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showAvailableGroupsModal} \r\n        onRequestClose={() => setShowAvailableGroupsModal(false)}\r\n        >\r\n            <h2>Выбери сословие для обмена жителями между соседними городами {prevPlayer.player_city_name} и {nextPlayer.player_city_name}:</h2>\r\n            {availableGroups.map((group, i) => (\r\n                <button key={i} onClick={() => handleChoiseCardToMove(group.value)}>\r\n                <p>{group.label}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n            isOpen={showCardsGroupNeighborsModal} \r\n            onRequestClose={() => setShowCardsGroupNeighborsModal(false)}\r\n        >\r\n            {cardsGroupNeighbors ? (\r\n                <>\r\n                    <h2>Выберите по одной карте из соседних городов:</h2>\r\n                    <div>\r\n                        <h3>Город: {cardsGroupNeighbors.next_player.player_city_name}</h3>\r\n                        {cardsGroupNeighbors.next_player.cards.map(c => (\r\n                            <label key={c.card_id}>\r\n                                <input\r\n                                type=\"radio\"\r\n                                name={cardsGroupNeighbors.next_player.player_id}\r\n                                value={c.card_id}\r\n                                onChange={() =>\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                    ...prev,\r\n                                    [cardsGroupNeighbors.next_player.player_id]: c.card_id\r\n                                    }))\r\n                                }\r\n                                />\r\n                                {c.card_name}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h3>Город: {cardsGroupNeighbors.prev_player.player_city_name}</h3>\r\n                        {cardsGroupNeighbors.prev_player.cards.map(c => (\r\n                            <label key={c.card_id}>\r\n                                <input\r\n                                type=\"radio\"\r\n                                name={cardsGroupNeighbors.prev_player.player_id}\r\n                                value={c.card_id}\r\n                                onChange={() =>\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                    ...prev,\r\n                                    [cardsGroupNeighbors.prev_player.player_id]: c.card_id\r\n                                    }))\r\n                                }\r\n                                />\r\n                                {c.card_name}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                    <button \r\n                        onClick={() => {\r\n                            setShowCardsGroupNeighborsModal(false);\r\n                            const next_player_id = cardsGroupNeighbors.next_player.player_id;\r\n                            const prev_player_id = cardsGroupNeighbors.prev_player.player_id;\r\n\r\n                            const next_player_card_id = selectedCardsRadio[next_player_id];\r\n                            const prev_player_card_id = selectedCardsRadio[prev_player_id];\r\n\r\n                            if (next_player_id && prev_player_id && next_player_card_id && prev_player_card_id) {\r\n                                handleSwapCards(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id);\r\n                            }\r\n                            else{\r\n                                alert(`next_player_id= ${next_player_id}, prev_player_id=${prev_player_id}, next_player_card_id=${next_player_card_id}, prev_player_card_id=${prev_player_card_id}`)\r\n                            }\r\n                        }}\r\n                    >\r\n                        <p>Поменять местами</p>\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <div>Загрузка данных</div>\r\n            )}\r\n            \r\n        </Modal>\r\n\r\n\r\n        <Modal \r\n        isOpen={showCardsWomenNeighborsModal} \r\n        onRequestClose={() => setShowCardsWomenNeighborsModal(false)}\r\n        >\r\n        {cardsWomenNeighbors &&\r\n        cardsWomenNeighbors.next_player &&\r\n        cardsWomenNeighbors.prev_player ? (\r\n            <>\r\n            <h2>Выберите по одной женщине из соседних городов:</h2>\r\n\r\n            <div>\r\n                <h3>Город: {cardsWomenNeighbors.next_player.player_city_name}</h3>\r\n                {cardsWomenNeighbors.next_player.cards.map(c => (\r\n                <label key={c.card_id}>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name={cardsWomenNeighbors.next_player.player_id}\r\n                    value={c.card_id}\r\n                    onChange={() =>\r\n                        setSelectedCardsRadio(prev => ({\r\n                        ...prev,\r\n                        [cardsWomenNeighbors.next_player.player_id]: c.card_id,\r\n                        }))\r\n                    }\r\n                    />\r\n                    {c.card_name}\r\n                </label>\r\n                ))}\r\n            </div>\r\n\r\n            <div>\r\n                <h3>Город: {cardsWomenNeighbors.prev_player.player_city_name}</h3>\r\n                {cardsWomenNeighbors.prev_player.cards.map(c => (\r\n                <label key={c.card_id}>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name={cardsWomenNeighbors.prev_player.player_id}\r\n                    value={c.card_id}\r\n                    onChange={() =>\r\n                        setSelectedCardsRadio(prev => ({\r\n                        ...prev,\r\n                        [cardsWomenNeighbors.prev_player.player_id]: c.card_id,\r\n                        }))\r\n                    }\r\n                    />\r\n                    {c.card_name}\r\n                </label>\r\n                ))}\r\n            </div>\r\n\r\n            <button\r\n                onClick={() => {\r\n                Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\r\n                    handleMoveCard(player_id, card_id);\r\n                });\r\n                setShowPeasantCardsModal(false);\r\n                }}\r\n            >\r\n                <p>Переместить</p>\r\n            </button>\r\n            </>\r\n        ) : (\r\n            <div>Загрузка данных...</div>\r\n        )}\r\n        </Modal>\r\n\r\n          \r\n        <div className='playing-cards'>\r\n            <h2>Выберите город, в котором хотите разыграть <span className='accent'>{card.name}</span>:</h2>\r\n            <div className='list-players'>\r\n                {card.card_data.play_only_in_own_city ? (\r\n                    <div\r\n                    className='item-player'\r\n                    key = {player.id}\r\n                    onClick={() => {handleClickItem(player)}}>\r\n                        {player.city_name}\r\n                    </div>\r\n                ) : (\r\n                    (players.length > 0) ? (\r\n                        players.map((value, i) => (\r\n                            <div \r\n                            className='item-player' \r\n                            key={i}\r\n                            onClick={() => {handleClickItem(value)}}>\r\n                                {value.city_name}\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div>Загрузка данных...</div>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlayingCards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}