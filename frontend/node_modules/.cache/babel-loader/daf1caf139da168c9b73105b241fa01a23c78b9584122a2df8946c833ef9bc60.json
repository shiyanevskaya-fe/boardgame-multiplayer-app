{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar33\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\vkr\\\\frontend\\\\src\\\\components\\\\PlayerTurn.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"../styles/PlayerTurn.css\";\nimport axios from 'axios';\nimport SelectFromCrossRoad from \"./SelectFromCrossRoad.js\";\nimport PlayerCardsDisplay from \"./PlayerCardsDisplay.js\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerTurn = ({\n  player,\n  roomCode\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [status, setStatus] = useState(null);\n  const [handCards, setHandCards] = useState([]);\n  const [isCrossroad, setIsCrossroad] = useState(false);\n  const fetchTurn = async () => {\n    try {\n      const response_player_status = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/status/`, {\n        'room_code': roomCode,\n        'player_id': player.id\n      });\n      const player_status = response_player_status.data;\n      setStatus(player_status);\n      try {\n        const response_player_hand = await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/players/${player.id}/hand/`);\n        const playerHand = response_player_hand.data;\n        setHandCards(playerHand);\n        console.log(response_player_hand.data);\n        if (player_status === \"set_cards\") {\n          if (playerHand.length === 0) {\n            try {\n              const response_top_card_from_deck = await axios.get(`http://192.168.1.68:8000/api/cards/deck/${roomCode}/top/`);\n              const top_card_from_deck = response_top_card_from_deck.data;\n              try {\n                await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/players/${player.id}/add-hand-card/${top_card_from_deck.id}/`, {\n                  'id_card_in_deck': top_card_from_deck.id\n                });\n                setIsCrossroad(true);\n              } catch (error) {\n                console.error(\"Ошибка при добавлении карты:\", error);\n              }\n            } catch (error_top_card) {\n              console.error(\"Ошибка при получении верхней карты из колоды:\", error_top_card);\n            }\n          }\n        } else if (player_status === \"playing_cards\") {\n          if (playerHand.length === 0) {\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/status/edit/`, {\n              'room_code': roomCode,\n              'player_id': player.id,\n              'new_status': \"waiting\"\n            });\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/epidemic/`, {\n              'player_id': player.id\n            });\n            const res = await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/end-game/check/`);\n            if (res.data.end_game) {\n              navigate(`/end-game/${roomCode}`);\n            } else {\n              await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/current-player/edit/`);\n            }\n          }\n        }\n      } catch (error_hand) {\n        console.error(\"Ошибка получения карт игрока:\", error_hand);\n      }\n    } catch (error_player_status) {\n      console.error(\"Ошибка при получении статуса игрока: \", error_player_status);\n    }\n  };\n  useEffect(() => {\n    fetchTurn();\n  }, [roomCode, player.id]);\n  const handleCardSelect = async () => {\n    await fetchTurn();\n  };\n  if (status === \"set_cards\") {\n    return /*#__PURE__*/_jsxDEV(SelectFromCrossRoad, {\n      roomCode: roomCode,\n      onCardSelect: handleCardSelect,\n      player: player\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  }\n  if (status === \"playing_cards\") {\n    return /*#__PURE__*/_jsxDEV(PlayerCardsDisplay, {\n      cards: handCards,\n      roomCode: roomCode,\n      action: handleCardSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-turn\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerTurn, \"9A4fIg4iv54mOaq+fGnzJrGg1Y4=\", false, function () {\n  return [useNavigate];\n});\n_c = PlayerTurn;\nexport default PlayerTurn;\nvar _c;\n$RefreshReg$(_c, \"PlayerTurn\");","map":{"version":3,"names":["React","useEffect","useState","axios","SelectFromCrossRoad","PlayerCardsDisplay","useNavigate","jsxDEV","_jsxDEV","PlayerTurn","player","roomCode","_s","navigate","status","setStatus","handCards","setHandCards","isCrossroad","setIsCrossroad","fetchTurn","response_player_status","post","id","player_status","data","response_player_hand","get","playerHand","console","log","length","response_top_card_from_deck","top_card_from_deck","error","error_top_card","res","end_game","error_hand","error_player_status","handleCardSelect","onCardSelect","fileName","_jsxFileName","lineNumber","columnNumber","cards","action","className","children","_c","$RefreshReg$"],"sources":["C:/Users/ar33/OneDrive/Документы/vkr/frontend/src/components/PlayerTurn.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport \"../styles/PlayerTurn.css\";\r\nimport axios from 'axios';\r\nimport SelectFromCrossRoad from \"./SelectFromCrossRoad.js\";\r\nimport PlayerCardsDisplay from \"./PlayerCardsDisplay.js\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst PlayerTurn = ({ player, roomCode }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const [status, setStatus] = useState(null);\r\n    const [handCards, setHandCards] = useState([]);\r\n    const [isCrossroad, setIsCrossroad] = useState(false);\r\n\r\n    const fetchTurn = async () => {\r\n        try {\r\n            const response_player_status = await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/status/`,\r\n                {\r\n                    'room_code': roomCode,\r\n                    'player_id': player.id\r\n                }\r\n            );\r\n\r\n            const player_status = response_player_status.data;\r\n            setStatus(player_status);\r\n\r\n            try{\r\n                const response_player_hand = await axios.get(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/players/${player.id}/hand/`\r\n                );\r\n    \r\n                const playerHand = response_player_hand.data;\r\n                setHandCards(playerHand);\r\n                console.log(response_player_hand.data);\r\n\r\n                if(player_status === \"set_cards\"){\r\n                    if(playerHand.length === 0){\r\n                        try {\r\n                            const response_top_card_from_deck = await axios.get(\r\n                                `http://192.168.1.68:8000/api/cards/deck/${roomCode}/top/`\r\n                            );\r\n        \r\n                            const top_card_from_deck = response_top_card_from_deck.data;\r\n        \r\n                            try {\r\n                                await axios.post(\r\n                                    `http://192.168.1.68:8000/api/rooms/${roomCode}/players/${player.id}/add-hand-card/${top_card_from_deck.id}/`, {\r\n                                        'id_card_in_deck': top_card_from_deck.id,\r\n                                    }\r\n                                ); \r\n\r\n                                setIsCrossroad(true);\r\n                            } catch(error){\r\n                                console.error(\"Ошибка при добавлении карты:\", error);\r\n                            }\r\n                        } catch(error_top_card){\r\n                            console.error(\"Ошибка при получении верхней карты из колоды:\", error_top_card);\r\n                        }\r\n                    }\r\n                } else if(player_status === \"playing_cards\"){\r\n                    if(playerHand.length === 0){\r\n                        await axios.post(\r\n                            `http://192.168.1.68:8000/api/rooms/${roomCode}/player/status/edit/`, {\r\n                                'room_code': roomCode,\r\n                                'player_id': player.id,\r\n                                'new_status': \"waiting\"\r\n                            }\r\n                        );\r\n\r\n                        await axios.post(\r\n                            `http://192.168.1.68:8000/api/rooms/${roomCode}/epidemic/`, {\r\n                                'player_id': player.id,\r\n                            }\r\n                        );\r\n\r\n                        const res = await axios.get(\r\n                            `http://192.168.1.68:8000/api/rooms/${roomCode}/end-game/check/`\r\n                        ); \r\n\r\n                        if(res.data.end_game){\r\n                            navigate(`/end-game/${roomCode}`);\r\n                        }\r\n                        else{\r\n                            await axios.get(\r\n                                `http://192.168.1.68:8000/api/rooms/${roomCode}/current-player/edit/`\r\n                            );   \r\n                        }\r\n\r\n                                             \r\n                    }\r\n                }\r\n            } catch(error_hand){\r\n                console.error(\"Ошибка получения карт игрока:\", error_hand);\r\n            }\r\n        } catch(error_player_status){\r\n            console.error(\"Ошибка при получении статуса игрока: \", error_player_status);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTurn();\r\n    }, [roomCode, player.id]);\r\n\r\n    const handleCardSelect = async() => {\r\n        await fetchTurn();\r\n    };\r\n\r\n    if(status === \"set_cards\"){\r\n        return(\r\n            <SelectFromCrossRoad\r\n                roomCode={roomCode}\r\n                onCardSelect={handleCardSelect}\r\n                player={player}\r\n            />\r\n        )\r\n    }\r\n\r\n    if(status === \"playing_cards\"){\r\n        return(\r\n            <PlayerCardsDisplay \r\n                cards={handCards} \r\n                roomCode = {roomCode}\r\n                action = {handleCardSelect}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"player-turn\">\r\n            <div>Загрузка данных...</div>\r\n        </div>\r\n    );\r\n}\r\n  \r\n\r\nexport default PlayerTurn;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}