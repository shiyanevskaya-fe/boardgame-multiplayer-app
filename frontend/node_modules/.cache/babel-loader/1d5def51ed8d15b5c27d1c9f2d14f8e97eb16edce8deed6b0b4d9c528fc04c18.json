{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar33\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\vkr\\\\frontend\\\\src\\\\components\\\\PlayingCards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../styles/PlayingCards.css\";\nimport axios from 'axios';\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst PlayingCards = ({\n  roomCode,\n  card,\n  action,\n  setSelectedCard\n}) => {\n  _s();\n  const player = JSON.parse(localStorage.getItem('player'));\n  const [players, setPlayers] = useState([]);\n  const [isSpecial, setIsSpecial] = useState(false);\n  const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\n  const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\n  const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\n  const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\n  const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\n  const [playerIdToMove, setPlayerIdToMove] = useState();\n  const [nextPlayer, setNextPlayer] = useState([]);\n  const [prevPlayer, setPrevPlayer] = useState([]);\n  const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\n  const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\n  const [cardDescription, setCardDescription] = useState();\n  const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\n  const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\n  const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\n  const [cardIdPlay, setCardIdPlay] = useState();\n  const [message, setMessage] = useState('');\n  const [data, setData] = useState([]);\n  const [groupedData, setGroupedData] = useState([]);\n  const [selectedGroupCards, setSelectedGroupCards] = useState({});\n  const [handleName, setHandleName] = useState('');\n  const [showModalWithOneChoise, setShowModalWithOneChoise] = useState(false);\n  const [showMultiChoiceModal, setShowMultiChoiceModal] = useState(false);\n  const handleActions = {\n    handleCureEpidemic: item => {\n      handleCureEpidemic(item.id);\n      setShowModalWithOneChoise(false);\n    },\n    handleStealCrusadePoints: item => {\n      handleStealCrusadePoints(item.id);\n      setShowModalWithOneChoise(false);\n    },\n    handleChoiseCourtKill: item => {\n      handleChoiseCourtKill(item.id);\n      setShowModalWithOneChoise(false);\n    },\n    handleResetCard: item => {\n      handleResetCard(item.id);\n      setShowModalWithOneChoise(false);\n    },\n    handleKillCourt: item => {\n      handleKillCourt(item.id);\n      setShowModalWithOneChoise(false);\n    },\n    handleDeleteCardAndGetCrusadePoints: item => {\n      handleDeleteCardAndGetCrusadePoints(item.id);\n      setShowModalWithOneChoise(false);\n    },\n    handleSendCourtCrusaderNeighbor: item => {\n      handleSendCourtCrusaderNeighbor(item.player_id, item.card_id);\n      setShowModalWithOneChoise(false);\n    },\n    handleMoveCard: item => {\n      const playerId = item.other_player_id || item.player_id;\n      const cardId = item.id_card_in_deck || item.card_id;\n      handleMoveCard(playerId, cardId);\n      setShowModalWithOneChoise(false);\n    },\n    handleChoiseCardToMove: item => {\n      handleChoiseCardToMove(item.value);\n      setShowModalWithOneChoise(false);\n    },\n    handleSwapCards: selected => {\n      const entries = Object.entries(selected);\n      if (entries.length === 2) {\n        const [[p1, c1], [p2, c2]] = entries;\n        handleSwapCards(p1, c1, p2, c2);\n      } else {\n        alert(\"Не выбраны две карты\");\n      }\n      setShowMultiChoiceModal(false);\n    },\n    handleMovePeasantCard: selected => {\n      Object.entries(selected).forEach(([player_id, card_id]) => {\n        handleMovePeasantCard(card_id, player_id);\n      });\n      setShowMultiChoiceModal(false);\n    },\n    handleMoveCardMany: selected => {\n      Object.entries(selected).forEach(([player_id, card_id]) => {\n        handleMoveCard(player_id, card_id);\n      });\n    }\n  };\n  const fetchPlayers = async () => {\n    try {\n      const response_players = await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/players/`);\n      setPlayers(response_players.data);\n    } catch (error) {\n      console.error(\"Ошибка получения пользователей:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchPlayers();\n    setCardDescription(card.card_data.description);\n  }, [roomCode, player.id]);\n  useEffect(() => {\n    if (card.card_group_in_deck === \"universal\") {\n      setIsSpecial(true);\n    }\n  }, [card]);\n  const handleClickItem = async pl => {\n    if (card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id || card.card_data.description !== \"require_discard_to_settle\") {\n      try {\n        const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`, {\n          'player_id': pl.id,\n          'id_card_in_deck': card.id\n        });\n        if (responce.data.epidemics) {\n          setMessage(responce.data.message);\n          setData(responce.data.epidemics);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n        if (responce.data.court_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.court_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdWhereKill(responce.data.player_id_where_kill);\n          return;\n        }\n        if (responce.data.monks) {\n          setMessage(responce.data.message);\n          setData(responce.data.monks);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.commoner_crusader_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.commoner_crusader_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.available_groups) {\n          setMessage(responce.data.message);\n          setData(responce.data.available_groups);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setNextPlayer(responce.data.neighbors.next_player);\n          setPrevPlayer(responce.data.neighbors.prev_player);\n          return;\n        }\n        if (responce.data.players_with_court) {\n          setMessage(responce.data.message);\n          setData(responce.data.players_with_court);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          return;\n        }\n        if (responce.data.cards_women_neighbors) {\n          const cardsObj = responce.data.cards_women_neighbors;\n          const groups = [{\n            title: `Город: ${cardsObj.next_player.player_city_name}`,\n            group_key: cardsObj.next_player.player_id,\n            cards: cardsObj.next_player.cards\n          }, {\n            title: `Город: ${cardsObj.prev_player.player_city_name}`,\n            group_key: cardsObj.prev_player.player_id,\n            cards: cardsObj.prev_player.cards\n          }];\n          setMessage(responce.data.message);\n          setGroupedData(groups);\n          setHandleName(responce.data.handle);\n          setSelectedGroupCards({});\n          setShowMultiChoiceModal(true);\n        }\n        if (responce.data.all_played_cards) {\n          setMessage(responce.data.message);\n          setData(responce.data.all_played_cards);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdWhereKill(responce.data.player_id);\n          return;\n        }\n        if (responce.data.players_have_crusade_points) {\n          setMessage(responce.data.message);\n          setData(responce.data.players_have_crusade_points);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player);\n          return;\n        }\n        if (responce.data.court_crusader_neighbor) {\n          setMessage(responce.data.message);\n          setData(responce.data.court_crusader_neighbor);\n          setHandleName(responce.data.handle);\n          setShowModalWithOneChoise(true);\n          setPlayerIdToMove(responce.data.player_id);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\n      }\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } else if (card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id) {\n      try {\n        const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`, {\n          'player_id': player.id,\n          'card_id': card.id\n        });\n        if (!response.data.can_play) {\n          setmodalAlertIsOpen(true);\n          return;\n        } else if (response.data.can_play && response.data.cards_hand) {\n          setMessage(response.data.message);\n          setData(response.data.cards_hand);\n          setHandleName(response.data.handle);\n          setShowModalWithOneChoise(true);\n          setCardIdPlay(response.data.card_id_play);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при розыгрыше карты в своем городе\", error);\n      }\n    }\n  };\n  const handleCureEpidemic = async epidemicId => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\n        epidemic_id: epidemicId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при лечении эпидемии:\", error);\n    }\n  };\n  const handleKillCourt = async courtCardId => {\n    try {\n      const responce = await axios.post(`\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, {\n        'player_id_where_kill': playerIdWhereKill,\n        'id_card_in_deck': courtCardId,\n        'card_description': cardDescription\n      });\n      if (responce.data.next_player && responce.data.prev_player) {\n        const groups = [{\n          title: `Город: ${responce.data.next_player.city_name}`,\n          group_key: responce.data.next_player.id,\n          cards: responce.data.next_player.peasant_cards.map(card => ({\n            card_id: card.id,\n            card_name: card.name\n          }))\n        }, {\n          title: `Город: ${responce.data.prev_player.city_name}`,\n          group_key: responce.data.prev_player.id,\n          cards: responce.data.prev_player.peasant_cards.map(card => ({\n            card_id: card.id,\n            card_name: card.name\n          }))\n        }];\n        setMessage(responce.data.message);\n        setGroupedData(groups);\n        setHandleName('handleMovePeasantCard');\n        setSelectedGroupCards({});\n        setShowMultiChoiceModal(true);\n      } else {\n        try {\n          await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n            data: {\n              'player_id': player.id,\n              'id_card_in_deck': card.id\n            }\n          });\n          action();\n          setSelectedCard(null);\n        } catch (error) {\n          console.error(\"Ошибка при удалении карты с руки: \", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты придворного: \", error);\n    }\n  };\n  const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\n        'player_id_from_move': fromPlayerId,\n        'player_id_to_move': playerIdToMovePeasantCards,\n        'id_card_in_deck': peasantCardId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перемещении карты простолюдина: \", error);\n    }\n  };\n  const handleMoveCard = async (player_id_from_move, card_id) => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`, {\n        'player_id_from_move': player_id_from_move,\n        'player_id_to_move': playerIdToMove,\n        'card_id': card_id\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перещении карты Монах: \", error);\n    }\n  };\n  const handleChoiseCardToMove = async group => {\n    const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`, {\n      'next_player_id': nextPlayer.player_id,\n      'prev_player_id': prevPlayer.player_id,\n      'card_group': group\n    });\n    if (response.data.cards_group_neighbors) {\n      // setCardsGroupNeighbors(response.data.cards_group_neighbors);\n      // setShowCardsGroupNeighborsModal(true);\n\n      const neighbors = response.data.cards_group_neighbors;\n      const groups = [{\n        title: `Город: ${neighbors.next_player.player_city_name}`,\n        group_key: neighbors.next_player.player_id,\n        cards: neighbors.next_player.cards\n      }, {\n        title: `Город: ${neighbors.prev_player.player_city_name}`,\n        group_key: neighbors.prev_player.player_id,\n        cards: neighbors.prev_player.cards\n      }];\n      setMessage(response.data.message);\n      setGroupedData(groups);\n      setHandleName(response.data.handle);\n      setSelectedGroupCards({});\n      setShowMultiChoiceModal(true);\n    }\n  };\n  const handleSwapCards = async (next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`, {\n      'next_player_id': next_player_id,\n      'next_player_card_id': next_player_card_id,\n      'prev_player_id': prev_player_id,\n      'prev_player_card_id': prev_player_card_id\n    });\n    try {\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты с руки: \", error);\n    }\n  };\n  const handleChoiseCourtKill = async player_id => {\n    const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`, {\n      'player_id': player_id\n    });\n    if (responce.data.court_cards) {\n      setMessage(responce.data.message);\n      setData(responce.data.court_cards);\n      setHandleName(responce.data.handle);\n      setShowModalWithOneChoise(true);\n      setPlayerIdWhereKill(responce.data.player_id_where_kill);\n      return;\n    }\n  };\n  const handleDeleteCardAndGetCrusadePoints = async card_id => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`, {\n        'player_id': playerIdWhereKill,\n        'card_id': card_id\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты и получении ко: \", error);\n    }\n  };\n  const handleStealCrusadePoints = async pl_id => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`, {\n        'player_id_from': pl_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при воровстве ко: \", error);\n    }\n  };\n  const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`, {\n        'player_id_from': player_id_from,\n        'card_id': card_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\n    }\n  };\n  const handleResetCard = async card_id => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`, {\n      'card_id': card_id,\n      'player_id': player.id,\n      'card_id_play': cardIdPlay\n    });\n    action();\n    setSelectedCard(null);\n  };\n  if (isSpecial) {\n    return /*#__PURE__*/_jsxDEV(PlayingSpecialCards, {\n      roomCode: roomCode,\n      card: card,\n      setIsSpecial: setIsSpecial\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalAlertIsOpen,\n      onRequestClose: () => setmodalAlertIsOpen(false),\n      contentLabel: \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0435\",\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041A\\u0430\\u0440\\u0442\\u0443 \\u043D\\u0435\\u043B\\u044C\\u0437\\u044F \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \\u0432 \\u0441\\u0432\\u043E\\u0435\\u043C \\u0433\\u043E\\u0440\\u043E\\u0434\\u0435, \\u0442\\u0430\\u043A \\u043A\\u0430\\u043A \\u043D\\u0435\\u0442 \\u043A\\u0430\\u0440\\u0442 \\u0434\\u043B\\u044F \\u0441\\u0431\\u0440\\u043E\\u0441\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showModalWithOneChoise,\n      onRequestClose: () => setShowModalWithOneChoise(false),\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _handleActions$handle;\n          return (_handleActions$handle = handleActions[handleName]) === null || _handleActions$handle === void 0 ? void 0 : _handleActions$handle.call(handleActions, item);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.card_name || item.name || item.label || item.other_player_city_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 13\n        }, this)\n      }, item.card_id || item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showMultiChoiceModal,\n      onRequestClose: () => setShowMultiChoiceModal(false),\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), groupedData.map((group, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 13\n        }, this), group.cards.map(card => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: group.group_key,\n            value: card.card_id,\n            checked: selectedGroupCards[group.group_key] === card.card_id,\n            onChange: () => setSelectedGroupCards(prev => ({\n              ...prev,\n              [group.group_key]: card.card_id\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 17\n          }, this), card.card_name]\n        }, card.card_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 17\n        }, this))]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _handleActions$handle2;\n          return (_handleActions$handle2 = handleActions[handleName]) === null || _handleActions$handle2 === void 0 ? void 0 : _handleActions$handle2.call(handleActions, selectedGroupCards);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0432 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u043C \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"accent\",\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 60\n        }, this), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-players\",\n        children: card.card_data.play_only_in_own_city ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(player);\n          },\n          children: player.city_name\n        }, player.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 21\n        }, this) : players.length > 0 ? players.map((value, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(value);\n          },\n          children: value.city_name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PlayingCards, \"gQFV2zKIea0t+UVG8p2S0876hRE=\");\n_c = PlayingCards;\nexport default PlayingCards;\nvar _c;\n$RefreshReg$(_c, \"PlayingCards\");","map":{"version":3,"names":["React","useState","useEffect","axios","PlayingSpecialCards","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","PlayingCards","roomCode","card","action","setSelectedCard","_s","player","JSON","parse","localStorage","getItem","players","setPlayers","isSpecial","setIsSpecial","playerIdWhereKill","setPlayerIdWhereKill","peasantCardsOptions","setPeasantCardsOptions","playerIdToMovePeasantCards","setPlayerIdToMovePeasantCards","showPeasantCardsModal","setShowPeasantCardsModal","selectedCardsRadio","setSelectedCardsRadio","playerIdToMove","setPlayerIdToMove","nextPlayer","setNextPlayer","prevPlayer","setPrevPlayer","cardsGroupNeighbors","setCardsGroupNeighbors","showCardsGroupNeighborsModal","setShowCardsGroupNeighborsModal","cardDescription","setCardDescription","cardsWomenNeighbors","setCardsWomenNeighbors","showCardsWomenNeighborsModal","setShowCardsWomenNeighborsModal","modalAlertIsOpen","setmodalAlertIsOpen","cardIdPlay","setCardIdPlay","message","setMessage","data","setData","groupedData","setGroupedData","selectedGroupCards","setSelectedGroupCards","handleName","setHandleName","showModalWithOneChoise","setShowModalWithOneChoise","showMultiChoiceModal","setShowMultiChoiceModal","handleActions","handleCureEpidemic","item","id","handleStealCrusadePoints","handleChoiseCourtKill","handleResetCard","handleKillCourt","handleDeleteCardAndGetCrusadePoints","handleSendCourtCrusaderNeighbor","player_id","card_id","handleMoveCard","playerId","other_player_id","cardId","id_card_in_deck","handleChoiseCardToMove","value","handleSwapCards","selected","entries","Object","length","p1","c1","p2","c2","alert","handleMovePeasantCard","forEach","handleMoveCardMany","fetchPlayers","response_players","get","error","console","card_data","description","card_group_in_deck","handleClickItem","pl","responce","post","epidemics","handle","court_cards","player_id_where_kill","monks","player_id_to_move","commoner_crusader_cards","available_groups","neighbors","next_player","prev_player","players_with_court","cards_women_neighbors","cardsObj","groups","title","player_city_name","group_key","cards","all_played_cards","players_have_crusade_points","court_crusader_neighbor","delete","response","can_play","cards_hand","card_id_play","epidemicId","epidemic_id","courtCardId","city_name","peasant_cards","map","card_name","name","peasantCardId","fromPlayerId","player_id_from_move","group","cards_group_neighbors","next_player_id","next_player_card_id","prev_player_id","prev_player_card_id","pl_id","player_id_from","fileName","_jsxFileName","lineNumber","columnNumber","children","isOpen","onRequestClose","contentLabel","className","overlayClassName","onClick","_handleActions$handle","call","label","other_player_city_name","i","type","checked","onChange","prev","_handleActions$handle2","play_only_in_own_city","_c","$RefreshReg$"],"sources":["C:/Users/ar33/OneDrive/Документы/vkr/frontend/src/components/PlayingCards.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"../styles/PlayingCards.css\";\r\nimport axios from 'axios';\r\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst PlayingCards = ({roomCode, card, action, setSelectedCard}) => {\r\n    const player = JSON.parse(localStorage.getItem('player'));\r\n\r\n    const [players, setPlayers] = useState([]);\r\n    const [isSpecial, setIsSpecial] = useState(false);\r\n\r\n\r\n    const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\r\n\r\n    const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\r\n    const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\r\n    const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\r\n    const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\r\n\r\n    const [playerIdToMove, setPlayerIdToMove] = useState();\r\n    \r\n    const [nextPlayer, setNextPlayer] = useState([]);\r\n    const [prevPlayer, setPrevPlayer] = useState([]);\r\n\r\n    const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\r\n    const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\r\n\r\n\r\n    const [cardDescription, setCardDescription] = useState();\r\n\r\n    const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\r\n    const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\r\n\r\n    const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\r\n\r\n    const [cardIdPlay, setCardIdPlay] = useState();\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [groupedData, setGroupedData] = useState([]);\r\n    const [selectedGroupCards, setSelectedGroupCards] = useState({});\r\n    const [handleName, setHandleName] = useState('');\r\n    const [showModalWithOneChoise, setShowModalWithOneChoise] = useState(false);\r\n    const [showMultiChoiceModal, setShowMultiChoiceModal] = useState(false);\r\n\r\n    \r\n\r\n    \r\n    const handleActions = {\r\n        handleCureEpidemic: (item) => {\r\n            handleCureEpidemic(item.id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleStealCrusadePoints: (item) => {\r\n            handleStealCrusadePoints(item.id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleChoiseCourtKill: (item) => {\r\n            handleChoiseCourtKill(item.id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleResetCard: (item) => {\r\n            handleResetCard(item.id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleKillCourt: (item) => {\r\n            handleKillCourt(item.id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleDeleteCardAndGetCrusadePoints: (item) => {\r\n            handleDeleteCardAndGetCrusadePoints(item.id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleSendCourtCrusaderNeighbor: (item) => {\r\n            handleSendCourtCrusaderNeighbor(item.player_id, item.card_id);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleMoveCard: (item) => {\r\n            const playerId = item.other_player_id || item.player_id;\r\n            const cardId = item.id_card_in_deck || item.card_id;\r\n\r\n            handleMoveCard(playerId, cardId);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleChoiseCardToMove: (item) => {\r\n            handleChoiseCardToMove(item.value);\r\n            setShowModalWithOneChoise(false);\r\n        },\r\n        handleSwapCards: (selected) => {\r\n            const entries = Object.entries(selected);\r\n            if (entries.length === 2) {\r\n            const [[p1, c1], [p2, c2]] = entries;\r\n            handleSwapCards(p1, c1, p2, c2);\r\n            } else {\r\n            alert(\"Не выбраны две карты\");\r\n            }\r\n            setShowMultiChoiceModal(false);\r\n        },\r\n        handleMovePeasantCard: (selected) => {\r\n            Object.entries(selected).forEach(([player_id, card_id]) => {\r\n            handleMovePeasantCard(card_id, player_id);\r\n            });\r\n            setShowMultiChoiceModal(false);\r\n        },\r\n        handleMoveCardMany:(selected) => {\r\n            Object.entries(selected).forEach(([player_id, card_id]) => {\r\n                handleMoveCard(player_id, card_id);\r\n            });\r\n        },\r\n    };\r\n\r\n\r\n    const fetchPlayers = async() => {\r\n        try {\r\n            const response_players = await axios.get(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/players/`\r\n            );\r\n\r\n            setPlayers(response_players.data);\r\n        } catch(error){\r\n            console.error(\"Ошибка получения пользователей:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPlayers();\r\n        setCardDescription(card.card_data.description);\r\n    }, [roomCode, player.id]);\r\n\r\n    useEffect(() => {\r\n        if (card.card_group_in_deck === \"universal\") {\r\n            setIsSpecial(true);\r\n        }\r\n    }, [card]);\r\n\r\n    const handleClickItem = async(pl) => {\r\n        if((card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id) || (card.card_data.description !== \"require_discard_to_settle\")){\r\n            try {\r\n                const responce = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`,{\r\n                        'player_id': pl.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                );\r\n\r\n                if(responce.data.epidemics){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.epidemics);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.court_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.monks){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.monks);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.commoner_crusader_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.commoner_crusader_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.available_groups){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.available_groups);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setNextPlayer(responce.data.neighbors.next_player);\r\n                    setPrevPlayer(responce.data.neighbors.prev_player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_with_court){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.players_with_court);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.cards_women_neighbors){\r\n                    const cardsObj = responce.data.cards_women_neighbors;\r\n                    const groups = [\r\n                        {\r\n                            title: `Город: ${cardsObj.next_player.player_city_name}`,\r\n                            group_key: cardsObj.next_player.player_id,\r\n                            cards: cardsObj.next_player.cards\r\n                        },\r\n                        {\r\n                            title: `Город: ${cardsObj.prev_player.player_city_name}`,\r\n                            group_key: cardsObj.prev_player.player_id,\r\n                            cards: cardsObj.prev_player.cards\r\n                        }\r\n                    ];\r\n\r\n                    setMessage(responce.data.message);\r\n                    setGroupedData(groups);\r\n                    setHandleName(responce.data.handle);\r\n                    setSelectedGroupCards({});\r\n                    setShowMultiChoiceModal(true);\r\n                }\r\n\r\n                if(responce.data.all_played_cards){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.all_played_cards);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    setPlayerIdWhereKill(responce.data.player_id);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_have_crusade_points){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.players_have_crusade_points);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n\r\n                    setPlayerIdToMove(responce.data.player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_crusader_neighbor){\r\n                    setMessage(responce.data.message);\r\n                    setData(responce.data.court_crusader_neighbor);\r\n                    setHandleName(responce.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setPlayerIdToMove(responce.data.player_id);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\r\n            }\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            action();\r\n            setSelectedCard(null);\r\n        }\r\n        else if(card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id){\r\n            try{\r\n                const response = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`,\r\n                    {\r\n                        'player_id': player.id,\r\n                        'card_id': card.id\r\n                    }\r\n                );\r\n                if(!response.data.can_play){\r\n                    setmodalAlertIsOpen(true);\r\n                    return;\r\n                }\r\n                else if(response.data.can_play && response.data.cards_hand){\r\n                    setMessage(response.data.message);\r\n                    setData(response.data.cards_hand);\r\n                    setHandleName(response.data.handle);\r\n                    setShowModalWithOneChoise(true);\r\n                    setCardIdPlay(response.data.card_id_play);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при розыгрыше карты в своем городе\",error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCureEpidemic = async (epidemicId) => {\r\n        try {\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\r\n                epidemic_id: epidemicId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            \r\n            action();\r\n            setSelectedCard(null);\r\n        } catch (error) {\r\n            console.error(\"Ошибка при лечении эпидемии:\", error);\r\n        }\r\n    };\r\n\r\n    const handleKillCourt = async (courtCardId) => {\r\n        try{\r\n            const responce = await axios.post(`\r\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, \r\n                {\r\n                    'player_id_where_kill': playerIdWhereKill,\r\n                    'id_card_in_deck': courtCardId,\r\n                    'card_description': cardDescription,\r\n                }\r\n            );\r\n\r\n            if(responce.data.next_player && responce.data.prev_player){\r\n                const groups = [\r\n                    {\r\n                        title: `Город: ${responce.data.next_player.city_name}`,\r\n                        group_key: responce.data.next_player.id,\r\n                        cards: responce.data.next_player.peasant_cards.map(card => ({\r\n                            card_id: card.id,\r\n                            card_name: card.name,\r\n                        }))\r\n                    },\r\n                    {\r\n                        title: `Город: ${responce.data.prev_player.city_name}`,\r\n                        group_key: responce.data.prev_player.id,\r\n                        cards: responce.data.prev_player.peasant_cards.map(card => ({\r\n                            card_id: card.id,\r\n                            card_name: card.name,\r\n                        }))\r\n                    }\r\n                ];\r\n\r\n                setMessage(responce.data.message);\r\n                setGroupedData(groups);\r\n                setHandleName('handleMovePeasantCard');\r\n                setSelectedGroupCards({});\r\n                setShowMultiChoiceModal(true);\r\n            }\r\n            else{\r\n                try {\r\n                    await axios.delete(\r\n                        `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                            data: {\r\n                                'player_id': player.id,\r\n                                'id_card_in_deck': card.id,\r\n                            }\r\n                            \r\n                        }\r\n                    );\r\n\r\n                    action();\r\n                    setSelectedCard(null);\r\n                } catch(error){\r\n                    console.error(\"Ошибка при удалении карты с руки: \", error);\r\n                }\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при удалении карты придворного: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\r\n\r\n        try{\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\r\n                'player_id_from_move': fromPlayerId,\r\n                'player_id_to_move': playerIdToMovePeasantCards,\r\n                'id_card_in_deck': peasantCardId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n\r\n        } catch(error){\r\n            console.error(\"Ошибка при перемещении карты простолюдина: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMoveCard = async(player_id_from_move, card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`,\r\n                {\r\n                    'player_id_from_move': player_id_from_move,\r\n                    'player_id_to_move': playerIdToMove,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при перещении карты Монах: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCardToMove = async(group) => {        \r\n        const response = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`,\r\n            {\r\n                'next_player_id': nextPlayer.player_id,\r\n                'prev_player_id': prevPlayer.player_id,\r\n                'card_group': group\r\n            }\r\n        );\r\n\r\n        if(response.data.cards_group_neighbors){\r\n            // setCardsGroupNeighbors(response.data.cards_group_neighbors);\r\n            // setShowCardsGroupNeighborsModal(true);\r\n\r\n            const neighbors = response.data.cards_group_neighbors;\r\n\r\n            const groups = [\r\n                {\r\n                    title: `Город: ${neighbors.next_player.player_city_name}`,\r\n                    group_key: neighbors.next_player.player_id,\r\n                    cards: neighbors.next_player.cards\r\n                },\r\n                {\r\n                    title: `Город: ${neighbors.prev_player.player_city_name}`,\r\n                    group_key: neighbors.prev_player.player_id,\r\n                    cards: neighbors.prev_player.cards\r\n                }\r\n            ];\r\n\r\n            setMessage(response.data.message);\r\n            setGroupedData(groups);\r\n            setHandleName(response.data.handle);\r\n            setSelectedGroupCards({});\r\n            setShowMultiChoiceModal(true);\r\n        }\r\n    };\r\n\r\n    const handleSwapCards = async(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`,\r\n            {\r\n                'next_player_id': next_player_id,\r\n                'next_player_card_id': next_player_card_id,\r\n                'prev_player_id': prev_player_id,\r\n                'prev_player_card_id': prev_player_card_id\r\n            }\r\n        );\r\n\r\n        try {\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты с руки: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCourtKill = async(player_id) => {\r\n        const responce = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`,\r\n            {\r\n                'player_id': player_id\r\n            }\r\n        );\r\n\r\n        if(responce.data.court_cards){\r\n            setMessage(responce.data.message);\r\n            setData(responce.data.court_cards);\r\n            setHandleName(responce.data.handle);\r\n            setShowModalWithOneChoise(true);\r\n            setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n            return;\r\n        }\r\n    };\r\n\r\n    const handleDeleteCardAndGetCrusadePoints = async (card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`,\r\n                {\r\n                    'player_id': playerIdWhereKill,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n            \r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты и получении ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleStealCrusadePoints = async (pl_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`,\r\n                {\r\n                    'player_id_from': pl_id,\r\n                    'player_id_to': playerIdToMove,\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при воровстве ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`,\r\n                {\r\n                    'player_id_from': player_id_from,\r\n                    'card_id': card_id,\r\n                    'player_id_to': playerIdToMove\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        }catch(error){\r\n            console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\r\n        }\r\n    };\r\n\r\n    const handleResetCard = async(card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`,\r\n            {\r\n                'card_id': card_id,\r\n                'player_id': player.id,\r\n                'card_id_play': cardIdPlay\r\n            }\r\n        );\r\n        action();\r\n        setSelectedCard(null);\r\n    };\r\n\r\n\r\n    if(isSpecial){\r\n        return (\r\n            <PlayingSpecialCards \r\n                roomCode = {roomCode} \r\n                card = {card} \r\n                setIsSpecial = {setIsSpecial}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Modal\r\n            isOpen={modalAlertIsOpen}\r\n            onRequestClose={() => setmodalAlertIsOpen(false)}\r\n            contentLabel=\"Уведомление\"\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-overlay\"\r\n            >\r\n            <h2>Карту нельзя разыграть в своем городе, так как нет карт для сброса</h2>\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showModalWithOneChoise} \r\n        onRequestClose={() => setShowModalWithOneChoise(false)}\r\n        className=\"modal\"\r\n        overlayClassName=\"modal-overlay\"\r\n        >\r\n        <h2>{message}</h2>\r\n        {data.map(item => (\r\n            <button key={item.card_id || item.id} onClick={() => handleActions[handleName]?.(item)}>\r\n            <p>{item.card_name || item.name || item.label || item.other_player_city_name}</p>\r\n            </button>\r\n        ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showMultiChoiceModal} \r\n        onRequestClose={() => setShowMultiChoiceModal(false)}\r\n        className=\"modal\"\r\n        overlayClassName=\"modal-overlay\"\r\n        >\r\n        <h2>{message}</h2>\r\n        {groupedData.map((group, i) => (\r\n            <div key={i}>\r\n            <h4>{group.title}</h4>\r\n            {group.cards.map(card => (\r\n                <label key={card.card_id}>\r\n                <input\r\n                    type=\"radio\"\r\n                    name={group.group_key}\r\n                    value={card.card_id}\r\n                    checked={selectedGroupCards[group.group_key] === card.card_id}\r\n                    onChange={() =>\r\n                    setSelectedGroupCards(prev => ({\r\n                        ...prev,\r\n                        [group.group_key]: card.card_id\r\n                    }))\r\n                    }\r\n                />\r\n                {card.card_name}\r\n                </label>\r\n            ))}\r\n            </div>\r\n        ))}\r\n\r\n        <button onClick={() => handleActions[handleName]?.(selectedGroupCards)}>\r\n            <p>Подтвердить</p>\r\n        </button>\r\n        </Modal>\r\n\r\n          \r\n        <div className='playing-cards'>\r\n            <h2>Выберите город, в котором хотите разыграть <span className='accent'>{card.name}</span>:</h2>\r\n            <div className='list-players'>\r\n                {card.card_data.play_only_in_own_city ? (\r\n                    <div\r\n                    className='item-player'\r\n                    key = {player.id}\r\n                    onClick={() => {handleClickItem(player)}}>\r\n                        {player.city_name}\r\n                    </div>\r\n                ) : (\r\n                    (players.length > 0) ? (\r\n                        players.map((value, i) => (\r\n                            <div \r\n                            className='item-player' \r\n                            key={i}\r\n                            onClick={() => {handleClickItem(value)}}>\r\n                                {value.city_name}\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div>Загрузка данных...</div>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlayingCards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}