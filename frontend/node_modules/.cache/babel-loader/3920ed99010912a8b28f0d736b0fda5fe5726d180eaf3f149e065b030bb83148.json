{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar33\\\\OneDrive\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\vkr\\\\frontend\\\\src\\\\components\\\\PlayingCards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../styles/PlayingCards.css\";\nimport axios from 'axios';\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst PlayingCards = ({\n  roomCode,\n  card,\n  action,\n  setSelectedCard\n}) => {\n  _s();\n  console.log(card);\n  const player = JSON.parse(localStorage.getItem('player'));\n  const [players, setPlayers] = useState([]);\n  const [isSpecial, setIsSpecial] = useState(false);\n  const [epidemicOptions, setEpidemicOptions] = useState([]);\n  const [showEpidemicModal, setShowEpidemicModal] = useState(false);\n  const [courtCardsOptions, setCourtCardsOptions] = useState([]);\n  const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\n  const [showCourtCardsModal, setShowCourtCardsModal] = useState(false);\n  const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\n  const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\n  const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\n  const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\n  const [playerIdToMove, setPlayerIdToMove] = useState();\n  const [monksOptions, setMonksOptions] = useState([]);\n  const [showMonksModal, setShowMonksModal] = useState(false);\n  const [commonerCrusaderCardsOptions, setCommonerCrusaderCardsOptions] = useState([]);\n  const [showCommonerCrusaderCardsModal, setShowCommonerCrusaderCardsModal] = useState(false);\n  const [availableGroups, setAvailableGroups] = useState([]);\n  const [showAvailableGroupsModal, setShowAvailableGroupsModal] = useState(false);\n  const [nextPlayer, setNextPlayer] = useState([]);\n  const [prevPlayer, setPrevPlayer] = useState([]);\n  const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\n  const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\n  const [playersWithCourt, setPlayersWithCourt] = useState([]);\n  const [showPlayersWithCourtModal, setShowPlayersWithCourtModal] = useState(false);\n  const [cardDescription, setCardDescription] = useState();\n  const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\n  const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\n  const [allPlayedCards, setAllPlayedCards] = useState([]);\n  const [showAllPlayedCardsModal, setShowAllPlayedCardsModal] = useState(false);\n  const [playersHaveCrusadePoints, setPlayersHaveCrusadePoints] = useState([]);\n  const [showPlayersHaveCrusadePointsModal, setShowPlayersHaveCrusadePointsModal] = useState(false);\n  const [courtCrusaderNeighbor, setCourtCrusaderNeighbor] = useState([]);\n  const [showCourtCrusaderNeighborModal, setShowCourtCrusaderNeighborModal] = useState(false);\n  const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\n  const [cardsHand, setCardsHand] = useState([]);\n  const [showCardsHandModal, setShowCardsHandModal] = useState(false);\n  const [cardIdPlay, setCardIdPlay] = useState();\n  const [showModalWithOneChoice, setShowModalWithOneChoice] = useState(false);\n  const [modalData, setModalData] = useState([]);\n  const [modalMessage, setModalMessage] = useState('');\n  const [onSelectAction, setOnSelectAction] = useState(() => () => {});\n  const openModal = (message, data, action) => {\n    setModalMessage(message);\n    setModalData(data);\n    setOnSelectAction(() => action);\n    setShowModalWithOneChoice(true);\n  };\n  const fetchPlayers = async () => {\n    try {\n      const response_players = await axios.get(`http://192.168.1.68:8000/api/rooms/${roomCode}/players/`);\n      setPlayers(response_players.data);\n    } catch (error) {\n      console.error(\"Ошибка получения пользователей:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchPlayers();\n    setCardDescription(card.card_data.description);\n  }, [roomCode, player.id]);\n  useEffect(() => {\n    if (card.card_group_in_deck === \"universal\") {\n      setIsSpecial(true);\n    }\n  }, [card]);\n  const handleClickItem = async pl => {\n    if (card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id || card.card_data.description !== \"require_discard_to_settle\") {\n      try {\n        const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`, {\n          'player_id': pl.id,\n          'id_card_in_deck': card.id\n        });\n        if (responce.data.epidemics) {\n          // setEpidemicOptions(responce.data.epidemics);\n          // setShowEpidemicModal(true);\n          openModal(responce.data.message || 'Выберите эпидемию для лечения:', responce.data.epidemics, handleCureEpidemic);\n          return;\n        }\n        if (responce.data.court_cards) {\n          setCourtCardsOptions(responce.data.court_cards);\n          setShowCourtCardsModal(true);\n          setPlayerIdWhereKill(responce.data.player_id_where_kill);\n          return;\n        }\n        if (responce.data.monks) {\n          setMonksOptions(responce.data.monks);\n          setShowMonksModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.commoner_crusader_cards) {\n          setCommonerCrusaderCardsOptions(responce.data.commoner_crusader_cards);\n          setShowCommonerCrusaderCardsModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.available_groups) {\n          setAvailableGroups(responce.data.available_groups);\n          setShowAvailableGroupsModal(true);\n          setNextPlayer(responce.data.neighbors.next_player);\n          setPrevPlayer(responce.data.neighbors.prev_player);\n          return;\n        }\n        if (responce.data.players_with_court) {\n          setPlayersWithCourt(responce.data.players_with_court);\n          setShowPlayersWithCourtModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.cards_women_neighbors) {\n          setCardsWomenNeighbors(responce.data.cards_women_neighbors);\n          setShowCardsWomenNeighborsModal(true);\n          setPlayerIdToMove(responce.data.player_id_to_move);\n          return;\n        }\n        if (responce.data.all_played_cards) {\n          setAllPlayedCards(responce.data.all_played_cards);\n          setShowAllPlayedCardsModal(true);\n          setPlayerIdWhereKill(responce.data.player_id);\n          return;\n        }\n        if (responce.data.players_have_crusade_points) {\n          setPlayersHaveCrusadePoints(responce.data.players_have_crusade_points);\n          setShowPlayersHaveCrusadePointsModal(true);\n          setPlayerIdToMove(responce.data.player);\n          return;\n        }\n        if (responce.data.court_crusader_neighbor) {\n          setCourtCrusaderNeighbor(responce.data.court_crusader_neighbor);\n          setShowCourtCrusaderNeighborModal(true);\n          setPlayerIdToMove(responce.data.player_id);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\n      }\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } else if (card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id) {\n      // Если рыцарь или конь и игрок хочет поселить в своем городе, то надо сбросить карту с руки\n      try {\n        const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`, {\n          'player_id': player.id,\n          'card_id': card.id\n        });\n        if (!response.data.can_play) {\n          // сообщение с ошибкой: вы не можете поселить жителя в своем городе, так как нет карт для сброса\n          setmodalAlertIsOpen(true);\n          return;\n        } else if (response.data.can_play && response.data.cards_hand) {\n          // модальное окно с выбором карты, которую надо сбросить\n          setCardsHand(response.data.cards_hand);\n          setCardIdPlay(response.data.card_id_play);\n          setShowCardsHandModal(true);\n          return;\n        }\n      } catch (error) {\n        console.error(\"Ошибка при розыгрыше карты в своем городе\", error);\n      }\n    }\n  };\n  const handleCureEpidemic = async epidemicId => {\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\n        epidemic_id: epidemicId\n      });\n      setShowEpidemicModal(false);\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при лечении эпидемии:\", error);\n    }\n  };\n  const handleKillCourt = async courtCardId => {\n    setShowCourtCardsModal(false);\n    try {\n      const responce = await axios.post(`\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, {\n        'player_id_where_kill': playerIdWhereKill,\n        'id_card_in_deck': courtCardId,\n        'card_description': cardDescription\n      });\n      if (responce.data.next_player && responce.data.prev_player) {\n        setPeasantCardsOptions([{\n          player_id: responce.data.next_player.id,\n          city_name: responce.data.next_player.city_name,\n          cards: responce.data.next_player.peasant_cards\n        }, {\n          player_id: responce.data.prev_player.id,\n          city_name: responce.data.prev_player.city_name,\n          cards: responce.data.prev_player.peasant_cards\n        }]);\n        setPlayerIdToMovePeasantCards(responce.data.player_id_to_move);\n        setShowPeasantCardsModal(true);\n        return;\n      } else {\n        try {\n          await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n            data: {\n              'player_id': player.id,\n              'id_card_in_deck': card.id\n            }\n          });\n          action();\n          setSelectedCard(null);\n        } catch (error) {\n          console.error(\"Ошибка при удалении карты с руки: \", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты придворного: \", error);\n    }\n  };\n  const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\n    setShowPeasantCardsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\n        'player_id_from_move': fromPlayerId,\n        'player_id_to_move': playerIdToMovePeasantCards,\n        'id_card_in_deck': peasantCardId\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перемещении карты простолюдина: \", error);\n    }\n  };\n  const handleMoveCard = async (player_id_from_move, card_id) => {\n    setShowMonksModal(false);\n    setShowCommonerCrusaderCardsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`, {\n        'player_id_from_move': player_id_from_move,\n        'player_id_to_move': playerIdToMove,\n        'card_id': card_id\n      });\n      try {\n        await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n          data: {\n            'player_id': player.id,\n            'id_card_in_deck': card.id\n          }\n        });\n        action();\n        setSelectedCard(null);\n      } catch (error) {\n        console.error(\"Ошибка при удалении карты с руки: \", error);\n      }\n    } catch (error) {\n      console.error(\"Ошибка при перещении карты Монах: \", error);\n    }\n  };\n  const handleChoiseCardToMove = async group => {\n    setShowAvailableGroupsModal(false);\n    const response = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`, {\n      'next_player_id': nextPlayer.player_id,\n      'prev_player_id': prevPlayer.player_id,\n      'card_group': group\n    });\n    if (response.data.cards_group_neighbors) {\n      setCardsGroupNeighbors(response.data.cards_group_neighbors);\n      setShowCardsGroupNeighborsModal(true);\n    }\n  };\n  const handleSwapCards = async (next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`, {\n      'next_player_id': next_player_id,\n      'next_player_card_id': next_player_card_id,\n      'prev_player_id': prev_player_id,\n      'prev_player_card_id': prev_player_card_id\n    });\n    try {\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты с руки: \", error);\n    }\n  };\n  const handleChoiseCourtKill = async player_id => {\n    setShowPlayersWithCourtModal(false);\n    const responce = await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`, {\n      'player_id': player_id\n    });\n    if (responce.data.court_cards) {\n      setCourtCardsOptions(responce.data.court_cards);\n      setShowCourtCardsModal(true);\n      setPlayerIdWhereKill(responce.data.player_id_where_kill);\n      return;\n    }\n  };\n  const handleDeleteCardAndGetCrusadePoints = async card_id => {\n    setShowAllPlayedCardsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`, {\n        'player_id': playerIdWhereKill,\n        'card_id': card_id\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при удалении карты и получении ко: \", error);\n    }\n  };\n  const handleStealCrusadePoints = async pl_id => {\n    setShowPlayersHaveCrusadePointsModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`, {\n        'player_id_from': pl_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при воровстве ко: \", error);\n    }\n  };\n  const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\n    setShowCourtCrusaderNeighborModal(false);\n    try {\n      await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`, {\n        'player_id_from': player_id_from,\n        'card_id': card_id,\n        'player_id_to': playerIdToMove\n      });\n      await axios.delete(`http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`, {\n        data: {\n          'player_id': player.id,\n          'id_card_in_deck': card.id\n        }\n      });\n      action();\n      setSelectedCard(null);\n    } catch (error) {\n      console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\n    }\n  };\n  const handleResetCard = async card_id => {\n    setShowCardsHandModal(false);\n    await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`, {\n      'card_id': card_id,\n      'player_id': player.id,\n      'card_id_play': cardIdPlay\n    });\n    action();\n    setSelectedCard(null);\n  };\n  const ChoiceModal = ({\n    isOpen,\n    onRequestClose,\n    message,\n    data,\n    onChoiceSelect\n  }) => {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onRequestClose: onRequestClose,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onChoiceSelect(item),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 25\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 13\n    }, this);\n  };\n  if (isSpecial) {\n    return /*#__PURE__*/_jsxDEV(PlayingSpecialCards, {\n      roomCode: roomCode,\n      card: card,\n      setIsSpecial: setIsSpecial\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ChoiceModal, {\n      isOpen: showModalWithOneChoice,\n      onRequestClose: () => setShowModalWithOneChoice(false),\n      message: modalMessage,\n      data: modalData,\n      onChoiceSelect: async item => {\n        await onSelectAction(item.id);\n        setShowModalWithOneChoice(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalAlertIsOpen,\n      onRequestClose: () => setmodalAlertIsOpen(false),\n      contentLabel: \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0435\",\n      className: \"modal\",\n      overlayClassName: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041A\\u0430\\u0440\\u0442\\u0443 \\u043D\\u0435\\u043B\\u044C\\u0437\\u044F \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \\u0432 \\u0441\\u0432\\u043E\\u0435\\u043C \\u0433\\u043E\\u0440\\u043E\\u0434\\u0435, \\u0442\\u0430\\u043A \\u043A\\u0430\\u043A \\u043D\\u0435\\u0442 \\u043A\\u0430\\u0440\\u0442 \\u0434\\u043B\\u044F \\u0441\\u0431\\u0440\\u043E\\u0441\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showEpidemicModal,\n      onRequestClose: () => setShowEpidemicModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u044D\\u043F\\u0438\\u0434\\u0435\\u043C\\u0438\\u044E \\u0434\\u043B\\u044F \\u043B\\u0435\\u0447\\u0435\\u043D\\u0438\\u044F:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 13\n      }, this), epidemicOptions.map(ep => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCureEpidemic(ep.id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ep.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 17\n        }, this)\n      }, ep.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsHandModal,\n      onRequestClose: () => setShowCardsHandModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043A\\u0430\\u0440\\u0442\\u0443, \\u043A\\u043E\\u0442\\u043E\\u0440\\u0443\\u044E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0441\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 13\n      }, this), cardsHand.map(card_hand => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleResetCard(card_hand.card_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card_hand.card_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 17\n        }, this)\n      }, card_hand.card_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCourtCardsModal,\n      onRequestClose: () => setShowCourtCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0440\\u0438\\u0434\\u0432\\u043E\\u0440\\u043D\\u043E\\u0433\\u043E, \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u0433\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0443\\u0431\\u0438\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 13\n      }, this), courtCardsOptions.map(court_card => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleKillCourt(court_card.id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: court_card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 17\n        }, this)\n      }, court_card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCourtCrusaderNeighborModal,\n      onRequestClose: () => setShowCourtCrusaderNeighborModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0440\\u0438\\u0434\\u0432\\u043E\\u0440\\u043D\\u043E\\u0433\\u043E, \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u0433\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432 \\u043A\\u0440\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u043F\\u043E\\u0445\\u043E\\u0434:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 13\n      }, this), courtCrusaderNeighbor.map(court_card => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSendCourtCrusaderNeighbor(court_card.player_id, court_card.card_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: court_card.card_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 17\n        }, this)\n      }, court_card.card_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showAllPlayedCardsModal,\n      onRequestClose: () => setShowAllPlayedCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043A\\u0430\\u0440\\u0442\\u0443, \\u043A\\u043E\\u0442\\u043E\\u0440\\u0443\\u044E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0441\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 13\n      }, this), allPlayedCards.map(played_card => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteCardAndGetCrusadePoints(played_card.card_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: played_card.card_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 17\n        }, this)\n      }, played_card.card_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showPeasantCardsModal,\n      onRequestClose: () => setShowPeasantCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u043C\\u0443 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u043B\\u044E\\u0434\\u0438\\u043D\\u0443 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 13\n      }, this), peasantCardsOptions.map(source => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", source.city_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 21\n        }, this), source.cards.map(card => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: source.player_id,\n            value: card.id,\n            onChange: () => {\n              setSelectedCardsRadio(prev => ({\n                ...prev,\n                [source.player_id]: card.id\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 29\n          }, this), card.name]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\n            handleMovePeasantCard(card_id, player_id);\n          });\n          setShowPeasantCardsModal(false);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showMonksModal,\n      onRequestClose: () => setShowMonksModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0438\\u0437 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u0433\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0430\\u043D\\u0438\\u0442\\u044C \\u041C\\u043E\\u043D\\u0430\\u0445\\u0430:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 13\n      }, this), monksOptions.map(monk => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoveCard(monk.other_player_id, monk.id_card_in_deck),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: monk.other_player_city_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 17\n        }, this)\n      }, monk.other_player_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showPlayersHaveCrusadePointsModal,\n      onRequestClose: () => setShowPlayersHaveCrusadePointsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0438\\u0437 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u0433\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0441\\u0432\\u043E\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043A\\u0440\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435 \\u043E\\u0447\\u043A\\u0438:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 13\n      }, this), playersHaveCrusadePoints.map(pl => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStealCrusadePoints(pl.player_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pl.player_city_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 17\n        }, this)\n      }, pl.player_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCommonerCrusaderCardsModal,\n      onRequestClose: () => setShowCommonerCrusaderCardsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043A\\u0430\\u0440\\u0442\\u0443 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u043B\\u044E\\u0434\\u0438\\u043D\\u0430 \\u043A\\u0440\\u0435\\u0441\\u0442\\u043E\\u043D\\u043E\\u0441\\u0446\\u0430, \\u043A\\u043E\\u0442\\u043E\\u0440\\u0443\\u044E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 13\n      }, this), commonerCrusaderCardsOptions.map(card => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoveCard(card.player_id, card.card_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.card_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 17\n        }, this)\n      }, card.card_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showAvailableGroupsModal,\n      onRequestClose: () => setShowAvailableGroupsModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u043E\\u0441\\u043B\\u043E\\u0432\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043E\\u0431\\u043C\\u0435\\u043D\\u0430 \\u0436\\u0438\\u0442\\u0435\\u043B\\u044F\\u043C\\u0438 \\u043C\\u0435\\u0436\\u0434\\u0443 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u043C\\u0438 \\u0433\\u043E\\u0440\\u043E\\u0434\\u0430\\u043C\\u0438 \", prevPlayer.player_city_name, \" \\u0438 \", nextPlayer.player_city_name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 13\n      }, this), availableGroups.map((group, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleChoiseCardToMove(group.value),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: group.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsGroupNeighborsModal,\n      onRequestClose: () => setShowCardsGroupNeighborsModal(false),\n      children: cardsGroupNeighbors ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u0439 \\u043A\\u0430\\u0440\\u0442\\u0435 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsGroupNeighbors.next_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 25\n          }, this), cardsGroupNeighbors.next_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsGroupNeighbors.next_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsGroupNeighbors.next_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 33\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsGroupNeighbors.prev_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 25\n          }, this), cardsGroupNeighbors.prev_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsGroupNeighbors.prev_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsGroupNeighbors.prev_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 837,\n              columnNumber: 33\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowCardsGroupNeighborsModal(false);\n            const next_player_id = cardsGroupNeighbors.next_player.player_id;\n            const prev_player_id = cardsGroupNeighbors.prev_player.player_id;\n            const next_player_card_id = selectedCardsRadio[next_player_id];\n            const prev_player_card_id = selectedCardsRadio[prev_player_id];\n            if (next_player_id && prev_player_id && next_player_card_id && prev_player_card_id) {\n              handleSwapCards(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id);\n            } else {\n              alert(`next_player_id= ${next_player_id}, prev_player_id=${prev_player_id}, next_player_card_id=${next_player_card_id}, prev_player_card_id=${prev_player_card_id}`);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u043E\\u043C\\u0435\\u043D\\u044F\\u0442\\u044C \\u043C\\u0435\\u0441\\u0442\\u0430\\u043C\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showCardsWomenNeighborsModal,\n      onRequestClose: () => setShowCardsWomenNeighborsModal(false),\n      children: cardsWomenNeighbors && cardsWomenNeighbors.next_player && cardsWomenNeighbors.prev_player ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E \\u043E\\u0434\\u043D\\u043E\\u0439 \\u0436\\u0435\\u043D\\u0449\\u0438\\u043D\\u0435 \\u0438\\u0437 \\u0441\\u043E\\u0441\\u0435\\u0434\\u043D\\u0438\\u0445 \\u0433\\u043E\\u0440\\u043E\\u0434\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsWomenNeighbors.next_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 17\n          }, this), cardsWomenNeighbors.next_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsWomenNeighbors.next_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsWomenNeighbors.next_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 893,\n              columnNumber: 21\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\u0413\\u043E\\u0440\\u043E\\u0434: \", cardsWomenNeighbors.prev_player.player_city_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 17\n          }, this), cardsWomenNeighbors.prev_player.cards.map(c => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: cardsWomenNeighbors.prev_player.player_id,\n              value: c.card_id,\n              onChange: () => setSelectedCardsRadio(prev => ({\n                ...prev,\n                [cardsWomenNeighbors.prev_player.player_id]: c.card_id\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 21\n            }, this), c.card_name]\n          }, c.card_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\n              handleMoveCard(player_id, card_id);\n            });\n            setShowPeasantCardsModal(false);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041F\\u0435\\u0440\\u0435\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 941,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showPlayersWithCourtModal,\n      onRequestClose: () => setShowPlayersWithCourtModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0432 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u043C \\u0445\\u043E\\u0447\\u0435\\u0448\\u044C \\u0443\\u0431\\u0438\\u0442\\u044C \\u043F\\u0440\\u0438\\u0434\\u0432\\u043E\\u0440\\u043D\\u043E\\u0433\\u043E:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 13\n      }, this), playersWithCourt.map((pl, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleChoiseCourtKill(pl.other_player_id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pl.other_player_city_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing-cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434, \\u0432 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u043C \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0440\\u0430\\u0437\\u044B\\u0433\\u0440\\u0430\\u0442\\u044C \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"accent\",\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 60\n        }, this), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-players\",\n        children: card.card_data.play_only_in_own_city ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(player);\n          },\n          children: player.city_name\n        }, player.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 963,\n          columnNumber: 21\n        }, this) : players.length > 0 ? players.map((value, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-player\",\n          onClick: () => {\n            handleClickItem(value);\n          },\n          children: value.city_name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PlayingCards, \"Hm6X7LkEPa8HKt707p4CGLAZEaQ=\");\n_c = PlayingCards;\nexport default PlayingCards;\nvar _c;\n$RefreshReg$(_c, \"PlayingCards\");","map":{"version":3,"names":["React","useState","useEffect","axios","PlayingSpecialCards","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","PlayingCards","roomCode","card","action","setSelectedCard","_s","console","log","player","JSON","parse","localStorage","getItem","players","setPlayers","isSpecial","setIsSpecial","epidemicOptions","setEpidemicOptions","showEpidemicModal","setShowEpidemicModal","courtCardsOptions","setCourtCardsOptions","playerIdWhereKill","setPlayerIdWhereKill","showCourtCardsModal","setShowCourtCardsModal","peasantCardsOptions","setPeasantCardsOptions","playerIdToMovePeasantCards","setPlayerIdToMovePeasantCards","showPeasantCardsModal","setShowPeasantCardsModal","selectedCardsRadio","setSelectedCardsRadio","playerIdToMove","setPlayerIdToMove","monksOptions","setMonksOptions","showMonksModal","setShowMonksModal","commonerCrusaderCardsOptions","setCommonerCrusaderCardsOptions","showCommonerCrusaderCardsModal","setShowCommonerCrusaderCardsModal","availableGroups","setAvailableGroups","showAvailableGroupsModal","setShowAvailableGroupsModal","nextPlayer","setNextPlayer","prevPlayer","setPrevPlayer","cardsGroupNeighbors","setCardsGroupNeighbors","showCardsGroupNeighborsModal","setShowCardsGroupNeighborsModal","playersWithCourt","setPlayersWithCourt","showPlayersWithCourtModal","setShowPlayersWithCourtModal","cardDescription","setCardDescription","cardsWomenNeighbors","setCardsWomenNeighbors","showCardsWomenNeighborsModal","setShowCardsWomenNeighborsModal","allPlayedCards","setAllPlayedCards","showAllPlayedCardsModal","setShowAllPlayedCardsModal","playersHaveCrusadePoints","setPlayersHaveCrusadePoints","showPlayersHaveCrusadePointsModal","setShowPlayersHaveCrusadePointsModal","courtCrusaderNeighbor","setCourtCrusaderNeighbor","showCourtCrusaderNeighborModal","setShowCourtCrusaderNeighborModal","modalAlertIsOpen","setmodalAlertIsOpen","cardsHand","setCardsHand","showCardsHandModal","setShowCardsHandModal","cardIdPlay","setCardIdPlay","showModalWithOneChoice","setShowModalWithOneChoice","modalData","setModalData","modalMessage","setModalMessage","onSelectAction","setOnSelectAction","openModal","message","data","fetchPlayers","response_players","get","error","card_data","description","id","card_group_in_deck","handleClickItem","pl","responce","post","epidemics","handleCureEpidemic","court_cards","player_id_where_kill","monks","player_id_to_move","commoner_crusader_cards","available_groups","neighbors","next_player","prev_player","players_with_court","cards_women_neighbors","all_played_cards","player_id","players_have_crusade_points","court_crusader_neighbor","delete","response","can_play","cards_hand","card_id_play","epidemicId","epidemic_id","handleKillCourt","courtCardId","city_name","cards","peasant_cards","handleMovePeasantCard","peasantCardId","fromPlayerId","handleMoveCard","player_id_from_move","card_id","handleChoiseCardToMove","group","cards_group_neighbors","handleSwapCards","next_player_id","next_player_card_id","prev_player_id","prev_player_card_id","handleChoiseCourtKill","handleDeleteCardAndGetCrusadePoints","handleStealCrusadePoints","pl_id","handleSendCourtCrusaderNeighbor","player_id_from","handleResetCard","ChoiceModal","isOpen","onRequestClose","onChoiceSelect","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","onClick","name","contentLabel","className","overlayClassName","ep","card_hand","card_name","court_card","played_card","source","type","value","onChange","prev","Object","entries","forEach","monk","other_player_id","id_card_in_deck","other_player_city_name","player_city_name","i","label","c","alert","play_only_in_own_city","length","_c","$RefreshReg$"],"sources":["C:/Users/ar33/OneDrive/Документы/vkr/frontend/src/components/PlayingCards.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"../styles/PlayingCards.css\";\r\nimport axios from 'axios';\r\nimport PlayingSpecialCards from \"./PlayingSpecialCards.js\";\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst PlayingCards = ({roomCode, card, action, setSelectedCard}) => {\r\n    \r\n\r\n    console.log(card);\r\n    const player = JSON.parse(localStorage.getItem('player'));\r\n\r\n    const [players, setPlayers] = useState([]);\r\n    const [isSpecial, setIsSpecial] = useState(false);\r\n\r\n    const [epidemicOptions, setEpidemicOptions] = useState([]);\r\n    const [showEpidemicModal, setShowEpidemicModal] = useState(false);\r\n\r\n    const [courtCardsOptions, setCourtCardsOptions] = useState([]);\r\n    const [playerIdWhereKill, setPlayerIdWhereKill] = useState();\r\n    const [showCourtCardsModal, setShowCourtCardsModal] = useState(false);\r\n\r\n    const [peasantCardsOptions, setPeasantCardsOptions] = useState([]);\r\n    const [playerIdToMovePeasantCards, setPlayerIdToMovePeasantCards] = useState();\r\n    const [showPeasantCardsModal, setShowPeasantCardsModal] = useState(false);\r\n    const [selectedCardsRadio, setSelectedCardsRadio] = useState({});\r\n\r\n    const [playerIdToMove, setPlayerIdToMove] = useState();\r\n\r\n    const [monksOptions, setMonksOptions] = useState([]);\r\n    const [showMonksModal, setShowMonksModal] = useState(false);\r\n\r\n    const [commonerCrusaderCardsOptions, setCommonerCrusaderCardsOptions] = useState([]);\r\n    const [showCommonerCrusaderCardsModal, setShowCommonerCrusaderCardsModal] = useState(false);\r\n    \r\n    const [availableGroups, setAvailableGroups] = useState([]);\r\n    const [showAvailableGroupsModal, setShowAvailableGroupsModal] = useState(false);\r\n    const [nextPlayer, setNextPlayer] = useState([]);\r\n    const [prevPlayer, setPrevPlayer] = useState([]);\r\n\r\n    const [cardsGroupNeighbors, setCardsGroupNeighbors] = useState();\r\n    const [showCardsGroupNeighborsModal, setShowCardsGroupNeighborsModal] = useState(false);\r\n\r\n    const [playersWithCourt, setPlayersWithCourt] = useState([]);\r\n    const [showPlayersWithCourtModal, setShowPlayersWithCourtModal] = useState(false);\r\n\r\n    const [cardDescription, setCardDescription] = useState();\r\n\r\n    const [cardsWomenNeighbors, setCardsWomenNeighbors] = useState([]);\r\n    const [showCardsWomenNeighborsModal, setShowCardsWomenNeighborsModal] = useState(false);\r\n\r\n    const [allPlayedCards, setAllPlayedCards] = useState([]);\r\n    const [showAllPlayedCardsModal, setShowAllPlayedCardsModal] = useState(false);\r\n\r\n    const [playersHaveCrusadePoints, setPlayersHaveCrusadePoints] = useState([]);\r\n    const [showPlayersHaveCrusadePointsModal, setShowPlayersHaveCrusadePointsModal] = useState(false);\r\n\r\n    const [courtCrusaderNeighbor, setCourtCrusaderNeighbor] = useState([]);\r\n    const [showCourtCrusaderNeighborModal, setShowCourtCrusaderNeighborModal] = useState(false);\r\n\r\n    const [modalAlertIsOpen, setmodalAlertIsOpen] = useState(false);\r\n\r\n    const [cardsHand, setCardsHand] = useState([]);\r\n    const [showCardsHandModal, setShowCardsHandModal] = useState(false);\r\n\r\n    const [cardIdPlay, setCardIdPlay] = useState();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [showModalWithOneChoice, setShowModalWithOneChoice] = useState(false);\r\n    const [modalData, setModalData] = useState([]);\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [onSelectAction, setOnSelectAction] = useState(() => () => {});\r\n\r\n    const openModal = (message, data, action) => {\r\n        setModalMessage(message);\r\n        setModalData(data);\r\n        setOnSelectAction(() => action);\r\n        setShowModalWithOneChoice(true);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const fetchPlayers = async() => {\r\n        try {\r\n            const response_players = await axios.get(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/players/`\r\n            );\r\n\r\n            setPlayers(response_players.data);\r\n        } catch(error){\r\n            console.error(\"Ошибка получения пользователей:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPlayers();\r\n        setCardDescription(card.card_data.description);\r\n    }, [roomCode, player.id]);\r\n\r\n    useEffect(() => {\r\n        if (card.card_group_in_deck === \"universal\") {\r\n            setIsSpecial(true);\r\n        }\r\n    }, [card]);\r\n\r\n    const handleClickItem = async(pl) => {\r\n        if((card.card_data.description === \"require_discard_to_settle\" && pl.id !== player.id) || (card.card_data.description !== \"require_discard_to_settle\")){\r\n            try {\r\n                const responce = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/add-played-card/`,{\r\n                        'player_id': pl.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                );\r\n\r\n                if(responce.data.epidemics){\r\n                    // setEpidemicOptions(responce.data.epidemics);\r\n                    // setShowEpidemicModal(true);\r\n                    openModal(\r\n                        responce.data.message || 'Выберите эпидемию для лечения:',\r\n                        responce.data.epidemics,\r\n                        handleCureEpidemic\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_cards){\r\n                    setCourtCardsOptions(responce.data.court_cards);\r\n                    setShowCourtCardsModal(true);\r\n                    setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.monks){\r\n                    setMonksOptions(responce.data.monks);\r\n                    setShowMonksModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.commoner_crusader_cards){\r\n                    setCommonerCrusaderCardsOptions(responce.data.commoner_crusader_cards);\r\n                    setShowCommonerCrusaderCardsModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.available_groups){\r\n                    setAvailableGroups(responce.data.available_groups);\r\n                    setShowAvailableGroupsModal(true);\r\n                    setNextPlayer(responce.data.neighbors.next_player);\r\n                    setPrevPlayer(responce.data.neighbors.prev_player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_with_court){\r\n                    setPlayersWithCourt(responce.data.players_with_court);\r\n                    setShowPlayersWithCourtModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.cards_women_neighbors){\r\n                    setCardsWomenNeighbors(responce.data.cards_women_neighbors);\r\n                    setShowCardsWomenNeighborsModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id_to_move);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.all_played_cards){\r\n                    setAllPlayedCards(responce.data.all_played_cards);\r\n                    setShowAllPlayedCardsModal(true);\r\n                    setPlayerIdWhereKill(responce.data.player_id);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.players_have_crusade_points){\r\n                    setPlayersHaveCrusadePoints(responce.data.players_have_crusade_points);\r\n                    setShowPlayersHaveCrusadePointsModal(true);\r\n                    setPlayerIdToMove(responce.data.player);\r\n                    return;\r\n                }\r\n\r\n                if(responce.data.court_crusader_neighbor){\r\n                    setCourtCrusaderNeighbor(responce.data.court_crusader_neighbor);\r\n                    setShowCourtCrusaderNeighborModal(true);\r\n                    setPlayerIdToMove(responce.data.player_id);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при добавлении карты в город (при розыгрыше): \", error);\r\n            }\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            action();\r\n            setSelectedCard(null);\r\n        }\r\n        else if(card.card_data.description === \"require_discard_to_settle\" && pl.id === player.id){\r\n            // Если рыцарь или конь и игрок хочет поселить в своем городе, то надо сбросить карту с руки\r\n            try{\r\n                const response = await axios.post(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/require-discard-to-settle/`,\r\n                    {\r\n                        'player_id': player.id,\r\n                        'card_id': card.id\r\n                    }\r\n                );\r\n                if(!response.data.can_play){\r\n                    // сообщение с ошибкой: вы не можете поселить жителя в своем городе, так как нет карт для сброса\r\n                    setmodalAlertIsOpen(true);\r\n                    return;\r\n                }\r\n                else if(response.data.can_play && response.data.cards_hand){\r\n                    // модальное окно с выбором карты, которую надо сбросить\r\n                    setCardsHand(response.data.cards_hand);\r\n                    setCardIdPlay(response.data.card_id_play);\r\n                    setShowCardsHandModal(true);\r\n                    return;\r\n                }\r\n            } catch(error){\r\n                console.error(\"Ошибка при розыгрыше карты в своем городе\",error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCureEpidemic = async (epidemicId) => {\r\n        try {\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/cure-epidemic/`, {\r\n                epidemic_id: epidemicId,\r\n            });\r\n\r\n            setShowEpidemicModal(false);\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n            \r\n            action();\r\n            setSelectedCard(null);\r\n        } catch (error) {\r\n            console.error(\"Ошибка при лечении эпидемии:\", error);\r\n        }\r\n    };\r\n\r\n    const handleKillCourt = async (courtCardId) => {\r\n        setShowCourtCardsModal(false);\r\n\r\n        try{\r\n            const responce = await axios.post(`\r\n                http://192.168.1.68:8000/api/rooms/${roomCode}/kill-court/`, \r\n                {\r\n                    'player_id_where_kill': playerIdWhereKill,\r\n                    'id_card_in_deck': courtCardId,\r\n                    'card_description': cardDescription,\r\n                }\r\n            );\r\n\r\n            if(responce.data.next_player && responce.data.prev_player){\r\n                setPeasantCardsOptions([\r\n                    {\r\n                        player_id: responce.data.next_player.id,\r\n                        city_name: responce.data.next_player.city_name,\r\n                        cards: responce.data.next_player.peasant_cards\r\n                    },\r\n                    {\r\n                        player_id: responce.data.prev_player.id,\r\n                        city_name: responce.data.prev_player.city_name,\r\n                        cards: responce.data.prev_player.peasant_cards\r\n                    }\r\n                ]);\r\n                setPlayerIdToMovePeasantCards(responce.data.player_id_to_move);\r\n                setShowPeasantCardsModal(true);\r\n                return;\r\n            }\r\n            else{\r\n                try {\r\n                    await axios.delete(\r\n                        `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                            data: {\r\n                                'player_id': player.id,\r\n                                'id_card_in_deck': card.id,\r\n                            }\r\n                            \r\n                        }\r\n                    );\r\n\r\n                    action();\r\n                    setSelectedCard(null);\r\n                } catch(error){\r\n                    console.error(\"Ошибка при удалении карты с руки: \", error);\r\n                }\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при удалении карты придворного: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMovePeasantCard = async (peasantCardId, fromPlayerId) => {\r\n        setShowPeasantCardsModal(false);\r\n\r\n        try{\r\n            await axios.post(`http://192.168.1.68:8000/api/rooms/${roomCode}/move-peasant-card/`, {\r\n                'player_id_from_move': fromPlayerId,\r\n                'player_id_to_move': playerIdToMovePeasantCards,\r\n                'id_card_in_deck': peasantCardId,\r\n            });\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n\r\n        } catch(error){\r\n            console.error(\"Ошибка при перемещении карты простолюдина: \", error);\r\n        }\r\n    };\r\n\r\n    const handleMoveCard = async(player_id_from_move, card_id) => {\r\n        setShowMonksModal(false);\r\n        setShowCommonerCrusaderCardsModal(false);\r\n\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/move-card/`,\r\n                {\r\n                    'player_id_from_move': player_id_from_move,\r\n                    'player_id_to_move': playerIdToMove,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            try {\r\n                await axios.delete(\r\n                    `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                        data: {\r\n                            'player_id': player.id,\r\n                            'id_card_in_deck': card.id,\r\n                        }\r\n                        \r\n                    }\r\n                );\r\n\r\n                action();\r\n                setSelectedCard(null);\r\n            } catch(error){\r\n                console.error(\"Ошибка при удалении карты с руки: \", error);\r\n            }\r\n        }catch(error){\r\n            console.error(\"Ошибка при перещении карты Монах: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCardToMove = async(group) => {\r\n        setShowAvailableGroupsModal(false);\r\n        \r\n        const response = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-card-to-move/`,\r\n            {\r\n                'next_player_id': nextPlayer.player_id,\r\n                'prev_player_id': prevPlayer.player_id,\r\n                'card_group': group\r\n            }\r\n        );\r\n\r\n        if(response.data.cards_group_neighbors){\r\n            setCardsGroupNeighbors(response.data.cards_group_neighbors);\r\n            setShowCardsGroupNeighborsModal(true);\r\n        }\r\n    };\r\n\r\n    const handleSwapCards = async(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id) => {\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/swap-cards/`,\r\n            {\r\n                'next_player_id': next_player_id,\r\n                'next_player_card_id': next_player_card_id,\r\n                'prev_player_id': prev_player_id,\r\n                'prev_player_card_id': prev_player_card_id\r\n            }\r\n        );\r\n\r\n        try {\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты с руки: \", error);\r\n        }\r\n    };\r\n\r\n    const handleChoiseCourtKill = async(player_id) => {\r\n        setShowPlayersWithCourtModal(false);\r\n\r\n        const responce = await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/choise-court-kill/`,\r\n            {\r\n                'player_id': player_id\r\n            }\r\n        );\r\n\r\n        if(responce.data.court_cards){\r\n            setCourtCardsOptions(responce.data.court_cards);\r\n            setShowCourtCardsModal(true);\r\n            setPlayerIdWhereKill(responce.data.player_id_where_kill);\r\n            return;\r\n        }\r\n    };\r\n\r\n    const handleDeleteCardAndGetCrusadePoints = async (card_id) => {\r\n        setShowAllPlayedCardsModal(false);\r\n\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/delete-card-and-get-crusade-points/`,\r\n                {\r\n                    'player_id': playerIdWhereKill,\r\n                    'card_id': card_id\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n            \r\n        } catch(error){\r\n            console.error(\"Ошибка при удалении карты и получении ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleStealCrusadePoints = async (pl_id) => {\r\n        setShowPlayersHaveCrusadePointsModal(false);\r\n\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/steal-crusade-points/`,\r\n                {\r\n                    'player_id_from': pl_id,\r\n                    'player_id_to': playerIdToMove,\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        } catch(error){\r\n            console.error(\"Ошибка при воровстве ко: \", error);\r\n        }\r\n    };\r\n\r\n    const handleSendCourtCrusaderNeighbor = async (player_id_from, card_id) => {\r\n        setShowCourtCrusaderNeighborModal(false);\r\n\r\n        try{\r\n            await axios.post(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/send-court-crusade/`,\r\n                {\r\n                    'player_id_from': player_id_from,\r\n                    'card_id': card_id,\r\n                    'player_id_to': playerIdToMove\r\n                }\r\n            );\r\n\r\n            await axios.delete(\r\n                `http://192.168.1.68:8000/api/rooms/${roomCode}/player/delete-hand-card/`,{\r\n                    data: {\r\n                        'player_id': player.id,\r\n                        'id_card_in_deck': card.id,\r\n                    }\r\n                    \r\n                }\r\n            );\r\n\r\n            action();\r\n            setSelectedCard(null);\r\n        }catch(error){\r\n            console.error(\"Ошибка при отправке придворного в крестовый поход: \", error);\r\n        }\r\n    };\r\n\r\n    const handleResetCard = async(card_id) => {\r\n        setShowCardsHandModal(false);\r\n        await axios.post(\r\n            `http://192.168.1.68:8000/api/rooms/${roomCode}/reset-card/play-require-discard-to-settle/`,\r\n            {\r\n                'card_id': card_id,\r\n                'player_id': player.id,\r\n                'card_id_play': cardIdPlay\r\n            }\r\n        );\r\n        action();\r\n        setSelectedCard(null);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const ChoiceModal = ({ isOpen, onRequestClose, message, data, onChoiceSelect }) => {\r\n        return (\r\n            <Modal isOpen={isOpen} onRequestClose={onRequestClose}>\r\n                <h2>{message}</h2>\r\n                {data.map((item) => (\r\n                    <button key={item.id} onClick={() => onChoiceSelect(item)}>\r\n                        <p>{item.name}</p>\r\n                    </button>\r\n                ))}\r\n            </Modal>\r\n        );\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    if(isSpecial){\r\n        return (\r\n            <PlayingSpecialCards \r\n                roomCode = {roomCode} \r\n                card = {card} \r\n                setIsSpecial = {setIsSpecial}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <ChoiceModal\r\n                isOpen={showModalWithOneChoice}\r\n                onRequestClose={() => setShowModalWithOneChoice(false)}\r\n                message={modalMessage}\r\n                data={modalData}\r\n                onChoiceSelect={async (item) => {\r\n                    await onSelectAction(item.id);\r\n                    setShowModalWithOneChoice(false);\r\n                }}\r\n            />\r\n        <Modal\r\n            isOpen={modalAlertIsOpen}\r\n            onRequestClose={() => setmodalAlertIsOpen(false)}\r\n            contentLabel=\"Уведомление\"\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-overlay\"\r\n            >\r\n            <h2>Карту нельзя разыграть в своем городе, так как нет карт для сброса</h2>\r\n        </Modal>\r\n\r\n\r\n        <Modal \r\n        isOpen={showEpidemicModal} \r\n        onRequestClose={() => setShowEpidemicModal(false)}\r\n        >\r\n            <h2>Выберите эпидемию для лечения:</h2>\r\n            {epidemicOptions.map(ep => (\r\n                <button key={ep.id} onClick={() => handleCureEpidemic(ep.id)}>\r\n                <p>{ep.name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showCardsHandModal} \r\n        onRequestClose={() => setShowCardsHandModal(false)}\r\n        >\r\n            <h2>Выберите карту, которую хотите сбросить:</h2>\r\n            {cardsHand.map(card_hand => (\r\n                <button key={card_hand.card_id} onClick={() => handleResetCard(card_hand.card_id)}>\r\n                <p>{card_hand.card_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showCourtCardsModal} \r\n        onRequestClose={() => setShowCourtCardsModal(false)}\r\n        >\r\n            <h2>Выберите придворного, которого хотите убить:</h2>\r\n            {courtCardsOptions.map(court_card => (\r\n                <button key={court_card.id} onClick={() => handleKillCourt(court_card.id)}>\r\n                <p>{court_card.name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showCourtCrusaderNeighborModal} \r\n        onRequestClose={() => setShowCourtCrusaderNeighborModal(false)}\r\n        >\r\n            <h2>Выберите придворного, которого хотите отправить в крестовый поход:</h2>\r\n            {courtCrusaderNeighbor.map(court_card => (\r\n                <button key={court_card.card_id} onClick={() => handleSendCourtCrusaderNeighbor(court_card.player_id, court_card.card_id)}>\r\n                <p>{court_card.card_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showAllPlayedCardsModal} \r\n        onRequestClose={() => setShowAllPlayedCardsModal(false)}\r\n        >\r\n            <h2>Выберите карту, которую хотите сбросить:</h2>\r\n            {allPlayedCards.map(played_card => (\r\n                <button key={played_card.card_id} onClick={() => handleDeleteCardAndGetCrusadePoints(played_card.card_id)}>\r\n                <p>{played_card.card_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n            isOpen={showPeasantCardsModal} \r\n            onRequestClose={() => setShowPeasantCardsModal(false)}\r\n        >\r\n            <h2>Выберите по одному простолюдину из соседних городов:</h2>\r\n            {peasantCardsOptions.map((source) => (\r\n                <div>\r\n                    <h3>Город: {source.city_name}</h3>\r\n                    {source.cards.map((card)=>(\r\n                        <label key={card.id}>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={source.player_id} \r\n                                value={card.id}\r\n                                onChange={() => {\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                        ...prev,\r\n                                        [source.player_id]: card.id\r\n                                    }));\r\n                                }}\r\n                            />\r\n                            {card.name}\r\n                        </label>\r\n                    ))}\r\n                        \r\n                </div>\r\n            ))}\r\n            <button \r\n                onClick={() => {\r\n                    Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\r\n                        handleMovePeasantCard(card_id, player_id);\r\n                    });\r\n                    setShowPeasantCardsModal(false);\r\n                }}\r\n            >\r\n                <p>Переместить</p>\r\n            </button>\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showMonksModal} \r\n        onRequestClose={() => setShowMonksModal(false)}\r\n        >\r\n            <h2>Выберите город, из которого хотите переманить Монаха:</h2>\r\n            {monksOptions.map(monk => (\r\n                <button key={monk.other_player_id} onClick={() => handleMoveCard(monk.other_player_id, monk.id_card_in_deck)}>\r\n                <p>{monk.other_player_city_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showPlayersHaveCrusadePointsModal} \r\n        onRequestClose={() => setShowPlayersHaveCrusadePointsModal(false)}\r\n        >\r\n            <h2>Выберите город, из которого хотите своровать крестовые очки:</h2>\r\n            {playersHaveCrusadePoints.map(pl => (\r\n                <button key={pl.player_id} onClick={() => handleStealCrusadePoints(pl.player_id)}>\r\n                <p>{pl.player_city_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showCommonerCrusaderCardsModal} \r\n        onRequestClose={() => setShowCommonerCrusaderCardsModal(false)}\r\n        >\r\n            <h2>Выберите карту простолюдина крестоносца, которую хотите переместить:</h2>\r\n            {commonerCrusaderCardsOptions.map(card => (\r\n                <button key={card.card_id} onClick={() => handleMoveCard(card.player_id, card.card_id)}>\r\n                <p>{card.card_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n        isOpen={showAvailableGroupsModal} \r\n        onRequestClose={() => setShowAvailableGroupsModal(false)}\r\n        >\r\n            <h2>Выбери сословие для обмена жителями между соседними городами {prevPlayer.player_city_name} и {nextPlayer.player_city_name}:</h2>\r\n            {availableGroups.map((group, i) => (\r\n                <button key={i} onClick={() => handleChoiseCardToMove(group.value)}>\r\n                <p>{group.label}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n\r\n        <Modal \r\n            isOpen={showCardsGroupNeighborsModal} \r\n            onRequestClose={() => setShowCardsGroupNeighborsModal(false)}\r\n        >\r\n            {cardsGroupNeighbors ? (\r\n                <>\r\n                    <h2>Выберите по одной карте из соседних городов:</h2>\r\n                    <div>\r\n                        <h3>Город: {cardsGroupNeighbors.next_player.player_city_name}</h3>\r\n                        {cardsGroupNeighbors.next_player.cards.map(c => (\r\n                            <label key={c.card_id}>\r\n                                <input\r\n                                type=\"radio\"\r\n                                name={cardsGroupNeighbors.next_player.player_id}\r\n                                value={c.card_id}\r\n                                onChange={() =>\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                    ...prev,\r\n                                    [cardsGroupNeighbors.next_player.player_id]: c.card_id\r\n                                    }))\r\n                                }\r\n                                />\r\n                                {c.card_name}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h3>Город: {cardsGroupNeighbors.prev_player.player_city_name}</h3>\r\n                        {cardsGroupNeighbors.prev_player.cards.map(c => (\r\n                            <label key={c.card_id}>\r\n                                <input\r\n                                type=\"radio\"\r\n                                name={cardsGroupNeighbors.prev_player.player_id}\r\n                                value={c.card_id}\r\n                                onChange={() =>\r\n                                    setSelectedCardsRadio(prev => ({\r\n                                    ...prev,\r\n                                    [cardsGroupNeighbors.prev_player.player_id]: c.card_id\r\n                                    }))\r\n                                }\r\n                                />\r\n                                {c.card_name}\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                    <button \r\n                        onClick={() => {\r\n                            setShowCardsGroupNeighborsModal(false);\r\n                            const next_player_id = cardsGroupNeighbors.next_player.player_id;\r\n                            const prev_player_id = cardsGroupNeighbors.prev_player.player_id;\r\n\r\n                            const next_player_card_id = selectedCardsRadio[next_player_id];\r\n                            const prev_player_card_id = selectedCardsRadio[prev_player_id];\r\n\r\n                            if (next_player_id && prev_player_id && next_player_card_id && prev_player_card_id) {\r\n                                handleSwapCards(next_player_id, next_player_card_id, prev_player_id, prev_player_card_id);\r\n                            }\r\n                            else{\r\n                                alert(`next_player_id= ${next_player_id}, prev_player_id=${prev_player_id}, next_player_card_id=${next_player_card_id}, prev_player_card_id=${prev_player_card_id}`)\r\n                            }\r\n                        }}\r\n                    >\r\n                        <p>Поменять местами</p>\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <div>Загрузка данных</div>\r\n            )}\r\n            \r\n        </Modal>\r\n\r\n\r\n        <Modal \r\n        isOpen={showCardsWomenNeighborsModal} \r\n        onRequestClose={() => setShowCardsWomenNeighborsModal(false)}\r\n        >\r\n        {cardsWomenNeighbors &&\r\n        cardsWomenNeighbors.next_player &&\r\n        cardsWomenNeighbors.prev_player ? (\r\n            <>\r\n            <h2>Выберите по одной женщине из соседних городов:</h2>\r\n\r\n            <div>\r\n                <h3>Город: {cardsWomenNeighbors.next_player.player_city_name}</h3>\r\n                {cardsWomenNeighbors.next_player.cards.map(c => (\r\n                <label key={c.card_id}>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name={cardsWomenNeighbors.next_player.player_id}\r\n                    value={c.card_id}\r\n                    onChange={() =>\r\n                        setSelectedCardsRadio(prev => ({\r\n                        ...prev,\r\n                        [cardsWomenNeighbors.next_player.player_id]: c.card_id,\r\n                        }))\r\n                    }\r\n                    />\r\n                    {c.card_name}\r\n                </label>\r\n                ))}\r\n            </div>\r\n\r\n            <div>\r\n                <h3>Город: {cardsWomenNeighbors.prev_player.player_city_name}</h3>\r\n                {cardsWomenNeighbors.prev_player.cards.map(c => (\r\n                <label key={c.card_id}>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name={cardsWomenNeighbors.prev_player.player_id}\r\n                    value={c.card_id}\r\n                    onChange={() =>\r\n                        setSelectedCardsRadio(prev => ({\r\n                        ...prev,\r\n                        [cardsWomenNeighbors.prev_player.player_id]: c.card_id,\r\n                        }))\r\n                    }\r\n                    />\r\n                    {c.card_name}\r\n                </label>\r\n                ))}\r\n            </div>\r\n\r\n            <button\r\n                onClick={() => {\r\n                Object.entries(selectedCardsRadio).forEach(([player_id, card_id]) => {\r\n                    handleMoveCard(player_id, card_id);\r\n                });\r\n                setShowPeasantCardsModal(false);\r\n                }}\r\n            >\r\n                <p>Переместить</p>\r\n            </button>\r\n            </>\r\n        ) : (\r\n            <div>Загрузка данных...</div>\r\n        )}\r\n        </Modal>\r\n\r\n\r\n\r\n        <Modal \r\n        isOpen={showPlayersWithCourtModal} \r\n        onRequestClose={() => setShowPlayersWithCourtModal(false)}\r\n        >\r\n            <h2>Выбери город, в котором хочешь убить придворного:</h2>\r\n            {playersWithCourt.map((pl, i) => (\r\n                <button key={i} onClick={() => handleChoiseCourtKill(pl.other_player_id)}>\r\n                <p>{pl.other_player_city_name}</p>\r\n                </button>\r\n            ))}\r\n        </Modal>\r\n          \r\n        <div className='playing-cards'>\r\n            <h2>Выберите город, в котором хотите разыграть <span className='accent'>{card.name}</span>:</h2>\r\n            <div className='list-players'>\r\n                {card.card_data.play_only_in_own_city ? (\r\n                    <div\r\n                    className='item-player'\r\n                    key = {player.id}\r\n                    onClick={() => {handleClickItem(player)}}>\r\n                        {player.city_name}\r\n                    </div>\r\n                ) : (\r\n                    (players.length > 0) ? (\r\n                        players.map((value, i) => (\r\n                            <div \r\n                            className='item-player' \r\n                            key={i}\r\n                            onClick={() => {handleClickItem(value)}}>\r\n                                {value.city_name}\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <div>Загрузка данных...</div>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlayingCards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}